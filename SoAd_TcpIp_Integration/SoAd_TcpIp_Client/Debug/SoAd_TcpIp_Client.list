
SoAd_TcpIp_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002510  08002510  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002510  08002510  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002510  08002510  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002514  08002514  00012514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000131c  20000090  080025a8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ac  080025a8  000213ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094fb  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015b0  00000000  00000000  000295b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001502  00000000  00000000  0002ab64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000370  00000000  00000000  0002c068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000298  00000000  00000000  0002c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003ab9  00000000  00000000  0002c670  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003e36  00000000  00000000  00030129  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000e565  00000000  00000000  00033f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000424c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c78  00000000  00000000  00042540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000090 	.word	0x20000090
 800014c:	00000000 	.word	0x00000000
 8000150:	080024e0 	.word	0x080024e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000094 	.word	0x20000094
 800016c:	080024e0 	.word	0x080024e0

08000170 <EthIf_ProvideTxBuffer>:
#include "Stm32_F103C6_EXTI_driver.h"
#include "Stm32_F103C6_USART_driver.h"

uint8* buffer;
void EthIf_ProvideTxBuffer(uint8 dummy1, uint8 dummy2, uint8 dummy3, uint8 dummy4, uint8** BufPtr, uint16* LenBytePtr)
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4604      	mov	r4, r0
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4623      	mov	r3, r4
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	4603      	mov	r3, r0
 8000184:	71bb      	strb	r3, [r7, #6]
 8000186:	460b      	mov	r3, r1
 8000188:	717b      	strb	r3, [r7, #5]
 800018a:	4613      	mov	r3, r2
 800018c:	713b      	strb	r3, [r7, #4]
	buffer = (uint8*)calloc(TcpIpBufferMemory, sizeof(uint8));
 800018e:	2101      	movs	r1, #1
 8000190:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000194:	f002 f89c 	bl	80022d0 <calloc>
 8000198:	4603      	mov	r3, r0
 800019a:	461a      	mov	r2, r3
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <EthIf_ProvideTxBuffer+0x40>)
 800019e:	601a      	str	r2, [r3, #0]
	*BufPtr = buffer;
 80001a0:	4b03      	ldr	r3, [pc, #12]	; (80001b0 <EthIf_ProvideTxBuffer+0x40>)
 80001a2:	681a      	ldr	r2, [r3, #0]
 80001a4:	69bb      	ldr	r3, [r7, #24]
 80001a6:	601a      	str	r2, [r3, #0]
}
 80001a8:	bf00      	nop
 80001aa:	370c      	adds	r7, #12
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd90      	pop	{r4, r7, pc}
 80001b0:	20000d2c 	.word	0x20000d2c

080001b4 <EthIf_Transmit>:

void EthIf_Transmit(uint8 dummy1, uint8 dummy2, uint8 dummy3, uint8 dummy4, uint16 LenByte, uint8 dummy5)
{
 80001b4:	b590      	push	{r4, r7, lr}
 80001b6:	b087      	sub	sp, #28
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4604      	mov	r4, r0
 80001bc:	4608      	mov	r0, r1
 80001be:	4611      	mov	r1, r2
 80001c0:	461a      	mov	r2, r3
 80001c2:	4623      	mov	r3, r4
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	4603      	mov	r3, r0
 80001c8:	71bb      	strb	r3, [r7, #6]
 80001ca:	460b      	mov	r3, r1
 80001cc:	717b      	strb	r3, [r7, #5]
 80001ce:	4613      	mov	r3, r2
 80001d0:	713b      	strb	r3, [r7, #4]
	TcpHeader* packet = (TcpHeader*)buffer;
 80001d2:	4b12      	ldr	r3, [pc, #72]	; (800021c <EthIf_Transmit+0x68>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	613b      	str	r3, [r7, #16]
    printf("Checksum: %d\n", packet->checkSum);
    printf("Urgent Ptr: %d\n", packet->urgentPointer);

    printf("\n\n");
	 */
	for(int i = 0; i< LenByte; i++){
 80001d8:	2300      	movs	r3, #0
 80001da:	617b      	str	r3, [r7, #20]
 80001dc:	e011      	b.n	8000202 <EthIf_Transmit+0x4e>
		uint8_t x = buffer[i];
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <EthIf_Transmit+0x68>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	4413      	add	r3, r2
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	73fb      	strb	r3, [r7, #15]
		MCAL_USART_SendData(USART1, (buffer+i), enable);
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <EthIf_Transmit+0x68>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	4413      	add	r3, r2
 80001f2:	2200      	movs	r2, #0
 80001f4:	4619      	mov	r1, r3
 80001f6:	480a      	ldr	r0, [pc, #40]	; (8000220 <EthIf_Transmit+0x6c>)
 80001f8:	f000 fe66 	bl	8000ec8 <MCAL_USART_SendData>
	for(int i = 0; i< LenByte; i++){
 80001fc:	697b      	ldr	r3, [r7, #20]
 80001fe:	3301      	adds	r3, #1
 8000200:	617b      	str	r3, [r7, #20]
 8000202:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000204:	697a      	ldr	r2, [r7, #20]
 8000206:	429a      	cmp	r2, r3
 8000208:	dbe9      	blt.n	80001de <EthIf_Transmit+0x2a>

	}
	free(buffer);
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <EthIf_Transmit+0x68>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4618      	mov	r0, r3
 8000210:	f002 f890 	bl	8002334 <free>
}
 8000214:	bf00      	nop
 8000216:	371c      	adds	r7, #28
 8000218:	46bd      	mov	sp, r7
 800021a:	bd90      	pop	{r4, r7, pc}
 800021c:	20000d2c 	.word	0x20000d2c
 8000220:	40013800 	.word	0x40013800

08000224 <SoAd_Init>:
		}SoAd_Buffer;
	}SoadSocketList[SoAdSoConMax];
}SoadSocketsConfig;


void SoAd_Init (const SoAd_ConfigType* SoAdConfigPtr){
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	SoadSocketsConfig.SoAd_Initialized = TRUE;
 800022c:	4b1b      	ldr	r3, [pc, #108]	; (800029c <SoAd_Init+0x78>)
 800022e:	2201      	movs	r2, #1
 8000230:	711a      	strb	r2, [r3, #4]
	SoadSocketsConfig.SoadSocketList[0].socketMode = SOAD_SOCON_OFFLINE;
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <SoAd_Init+0x78>)
 8000234:	2202      	movs	r2, #2
 8000236:	729a      	strb	r2, [r3, #10]
	SoadSocketsConfig.SoadSocketList[0].protocol = TCPIP_IPPROTO_TCP;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <SoAd_Init+0x78>)
 800023a:	2206      	movs	r2, #6
 800023c:	72da      	strb	r2, [r3, #11]
	SoadSocketsConfig.SoadSocketList[0].state = SOCKET_NOT_USED;
 800023e:	4b17      	ldr	r3, [pc, #92]	; (800029c <SoAd_Init+0x78>)
 8000240:	2203      	movs	r2, #3
 8000242:	731a      	strb	r2, [r3, #12]

	SoadSocketsConfig.SoadSocketList[0].sockTcpConfig.SoAdSocketTcpInitiate =
			SoAdConfigPtr->SoAd_SockConnGroup[0].SoAd_SocketProtocol.SoAd_SocketTcpConfig.SoAdSocketTcpInitiate;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	SoadSocketsConfig.SoadSocketList[0].sockTcpConfig.SoAdSocketTcpInitiate =
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <SoAd_Init+0x78>)
 800024c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	SoadSocketsConfig.SoadSocketList[0].sockConnectionGroup.SoAdSocketLocalPort = \
			SoAdConfigPtr->SoAd_SockConnGroup[0].SoAdSocketLocalPort;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	881a      	ldrh	r2, [r3, #0]
	SoadSocketsConfig.SoadSocketList[0].sockConnectionGroup.SoAdSocketLocalPort = \
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <SoAd_Init+0x78>)
 8000256:	821a      	strh	r2, [r3, #16]
	SoadSocketsConfig.SoadSocketList[0].sockConnectionGroup.SoAd_SocketConnection.SoAd_SocketRemoteAddress.Domain = \
			SoAdConfigPtr->SoAd_SockConnGroup[0].SoAd_SocketConnection.SoAd_SocketRemoteAddress.Domain;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	7d9a      	ldrb	r2, [r3, #22]
	SoadSocketsConfig.SoadSocketList[0].sockConnectionGroup.SoAd_SocketConnection.SoAd_SocketRemoteAddress.Domain = \
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <SoAd_Init+0x78>)
 800025e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(int i = 0; i < 4; i++ ){
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	e00d      	b.n	8000284 <SoAd_Init+0x60>
	SoadSocketsConfig.SoadSocketList[0].sockConnectionGroup.SoAd_SocketConnection.SoAd_SocketRemoteAddress.SoAdSocketRemoteIpAddress[i] = \
				SoAdConfigPtr->SoAd_SockConnGroup[0].SoAd_SocketConnection.SoAd_SocketRemoteAddress.SoAdSocketRemoteIpAddress[i];
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	4413      	add	r3, r2
 800026e:	331a      	adds	r3, #26
 8000270:	7819      	ldrb	r1, [r3, #0]
	SoadSocketsConfig.SoadSocketList[0].sockConnectionGroup.SoAd_SocketConnection.SoAd_SocketRemoteAddress.SoAdSocketRemoteIpAddress[i] = \
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <SoAd_Init+0x78>)
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	4413      	add	r3, r2
 8000278:	332a      	adds	r3, #42	; 0x2a
 800027a:	460a      	mov	r2, r1
 800027c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++ ){
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	3301      	adds	r3, #1
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	2b03      	cmp	r3, #3
 8000288:	ddee      	ble.n	8000268 <SoAd_Init+0x44>
	}
	SoadSocketsConfig.SoadSocketList[0].sockConnectionGroup.SoAd_SocketConnection.SoAd_SocketRemoteAddress.SoAdSocketRemotePort = \
				SoAdConfigPtr->SoAd_SockConnGroup[0].SoAd_SocketConnection.SoAd_SocketRemoteAddress.SoAdSocketRemotePort;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	8b1a      	ldrh	r2, [r3, #24]
	SoadSocketsConfig.SoadSocketList[0].sockConnectionGroup.SoAd_SocketConnection.SoAd_SocketRemoteAddress.SoAdSocketRemotePort = \
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <SoAd_Init+0x78>)
 8000290:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	20000d30 	.word	0x20000d30

080002a0 <SoAd_OpenSoCon>:

Std_ReturnType SoAd_OpenSoCon(SoAd_SoConIdType SoConId){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]

	uint8 error_code;
	if(FALSE == SoadSocketsConfig.SoAd_Initialized){
 80002aa:	4b14      	ldr	r3, [pc, #80]	; (80002fc <SoAd_OpenSoCon+0x5c>)
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d101      	bne.n	80002b6 <SoAd_OpenSoCon+0x16>
		/*Det Error */
		return E_NOT_OK;
 80002b2:	2300      	movs	r3, #0
 80002b4:	e01c      	b.n	80002f0 <SoAd_OpenSoCon+0x50>
	}

	if(SoAdSoConMax <= SoConId){
 80002b6:	88fb      	ldrh	r3, [r7, #6]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SoAd_OpenSoCon+0x20>
		/*Det Error */
		return E_NOT_OK;
 80002bc:	2300      	movs	r3, #0
 80002be:	e017      	b.n	80002f0 <SoAd_OpenSoCon+0x50>
	if(SoAdSocketAutomaticSoConSetup == TRUE){
		/*Det Error */
		return E_NOT_OK;
	}

	if(SoadSocketsConfig.SoadSocketList[SoConId].socketMode == SOAD_SOCON_OFFLINE)
 80002c0:	88fb      	ldrh	r3, [r7, #6]
 80002c2:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <SoAd_OpenSoCon+0x5c>)
 80002c4:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80002c8:	fb01 f303 	mul.w	r3, r1, r3
 80002cc:	4413      	add	r3, r2
 80002ce:	330a      	adds	r3, #10
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b02      	cmp	r3, #2
 80002d4:	d10b      	bne.n	80002ee <SoAd_OpenSoCon+0x4e>
	{
		SoadSocketsConfig.SoadSocketList[SoConId].state = SOCKET_CREATE;
 80002d6:	88fb      	ldrh	r3, [r7, #6]
 80002d8:	4a08      	ldr	r2, [pc, #32]	; (80002fc <SoAd_OpenSoCon+0x5c>)
 80002da:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80002de:	fb01 f303 	mul.w	r3, r1, r3
 80002e2:	4413      	add	r3, r2
 80002e4:	330c      	adds	r3, #12
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
	}
	else{
		return E_NOT_OK;
	}
	return E_OK;
 80002ea:	2301      	movs	r3, #1
 80002ec:	e000      	b.n	80002f0 <SoAd_OpenSoCon+0x50>
		return E_NOT_OK;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000d30 	.word	0x20000d30

08000300 <SoAd_MainFunction>:


void SoAd_MainFunction(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0

	SoAd_SoConIdType socketInd;
	SoAd_SoConIdType socketAcquiredInd;
	Std_ReturnType ret;
	TcpIp_SockAddrType* genericAddress;
	for(socketInd = 0; socketInd < SoAdSoConMax; socketInd++){
 8000306:	2300      	movs	r3, #0
 8000308:	81fb      	strh	r3, [r7, #14]
 800030a:	e0d5      	b.n	80004b8 <SoAd_MainFunction+0x1b8>
		if(SoadSocketsConfig.SoadSocketList[socketInd].socketMode == SOAD_SOCON_OFFLINE \
 800030c:	89fb      	ldrh	r3, [r7, #14]
 800030e:	4a6e      	ldr	r2, [pc, #440]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 8000310:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000314:	fb01 f303 	mul.w	r3, r1, r3
 8000318:	4413      	add	r3, r2
 800031a:	330a      	adds	r3, #10
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b02      	cmp	r3, #2
 8000320:	d10b      	bne.n	800033a <SoAd_MainFunction+0x3a>
				&& SoadSocketsConfig.SoadSocketList[socketInd].state != SOCKET_CREATE){
 8000322:	89fb      	ldrh	r3, [r7, #14]
 8000324:	4a68      	ldr	r2, [pc, #416]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 8000326:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800032a:	fb01 f303 	mul.w	r3, r1, r3
 800032e:	4413      	add	r3, r2
 8000330:	330c      	adds	r3, #12
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	f040 80bc 	bne.w	80004b2 <SoAd_MainFunction+0x1b2>

		}else{
			if(SoadSocketsConfig.SoadSocketList[socketInd].state != SOCKET_Aquired && \
 800033a:	89fb      	ldrh	r3, [r7, #14]
 800033c:	4a62      	ldr	r2, [pc, #392]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 800033e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000342:	fb01 f303 	mul.w	r3, r1, r3
 8000346:	4413      	add	r3, r2
 8000348:	330c      	adds	r3, #12
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b02      	cmp	r3, #2
 800034e:	f000 80b0 	beq.w	80004b2 <SoAd_MainFunction+0x1b2>
					SoadSocketsConfig.SoadSocketList[socketInd].state != SOCKET_InUse){
 8000352:	89fb      	ldrh	r3, [r7, #14]
 8000354:	4a5c      	ldr	r2, [pc, #368]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 8000356:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800035a:	fb01 f303 	mul.w	r3, r1, r3
 800035e:	4413      	add	r3, r2
 8000360:	330c      	adds	r3, #12
 8000362:	781b      	ldrb	r3, [r3, #0]
			if(SoadSocketsConfig.SoadSocketList[socketInd].state != SOCKET_Aquired && \
 8000364:	2b00      	cmp	r3, #0
 8000366:	f000 80a4 	beq.w	80004b2 <SoAd_MainFunction+0x1b2>
				if(SoadSocketsConfig.SoadSocketList[socketInd].state == SOCKET_CREATE){
 800036a:	89fb      	ldrh	r3, [r7, #14]
 800036c:	4a56      	ldr	r2, [pc, #344]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 800036e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000372:	fb01 f303 	mul.w	r3, r1, r3
 8000376:	4413      	add	r3, r2
 8000378:	330c      	adds	r3, #12
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	f040 8098 	bne.w	80004b2 <SoAd_MainFunction+0x1b2>
					ret = TcpIp_SoAdGetSocket(SoadSocketsConfig.SoadSocketList[socketInd].sockConnectionGroup.SoAd_SocketConnection.SoAd_SocketRemoteAddress.Domain, \
 8000382:	89fb      	ldrh	r3, [r7, #14]
 8000384:	4a50      	ldr	r2, [pc, #320]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 8000386:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800038a:	fb01 f303 	mul.w	r3, r1, r3
 800038e:	4413      	add	r3, r2
 8000390:	3326      	adds	r3, #38	; 0x26
 8000392:	7818      	ldrb	r0, [r3, #0]
 8000394:	89fb      	ldrh	r3, [r7, #14]
 8000396:	4a4c      	ldr	r2, [pc, #304]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 8000398:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800039c:	fb01 f303 	mul.w	r3, r1, r3
 80003a0:	4413      	add	r3, r2
 80003a2:	330b      	adds	r3, #11
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	1dba      	adds	r2, r7, #6
 80003a8:	4619      	mov	r1, r3
 80003aa:	f001 f84d 	bl	8001448 <TcpIp_SoAdGetSocket>
 80003ae:	4603      	mov	r3, r0
 80003b0:	737b      	strb	r3, [r7, #13]
							SoadSocketsConfig.SoadSocketList[socketInd].protocol, &socketAcquiredInd);


					if(ret == E_OK){
 80003b2:	7b7b      	ldrb	r3, [r7, #13]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d129      	bne.n	800040c <SoAd_MainFunction+0x10c>
						SoadSocketsConfig.SoadSocketList[socketInd].tcpipsocketID = socketAcquiredInd;
 80003b8:	89fb      	ldrh	r3, [r7, #14]
 80003ba:	88f8      	ldrh	r0, [r7, #6]
 80003bc:	4a42      	ldr	r2, [pc, #264]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 80003be:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80003c2:	fb01 f303 	mul.w	r3, r1, r3
 80003c6:	4413      	add	r3, r2
 80003c8:	3308      	adds	r3, #8
 80003ca:	4602      	mov	r2, r0
 80003cc:	801a      	strh	r2, [r3, #0]
						if(SoadSocketsConfig.SoadSocketList[socketInd].protocol == TCPIP_IPPROTO_TCP){
 80003ce:	89fb      	ldrh	r3, [r7, #14]
 80003d0:	4a3d      	ldr	r2, [pc, #244]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 80003d2:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80003d6:	fb01 f303 	mul.w	r3, r1, r3
 80003da:	4413      	add	r3, r2
 80003dc:	330b      	adds	r3, #11
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b06      	cmp	r3, #6
 80003e2:	d113      	bne.n	800040c <SoAd_MainFunction+0x10c>
							SoadSocketsConfig.SoadSocketList[socketInd].socketMode = SOAD_SOCON_RECONNECT;
 80003e4:	89fb      	ldrh	r3, [r7, #14]
 80003e6:	4a38      	ldr	r2, [pc, #224]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 80003e8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80003ec:	fb01 f303 	mul.w	r3, r1, r3
 80003f0:	4413      	add	r3, r2
 80003f2:	330a      	adds	r3, #10
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
							SoadSocketsConfig.SoadSocketList[socketInd].state = SOCKET_InUse;
 80003f8:	89fb      	ldrh	r3, [r7, #14]
 80003fa:	4a33      	ldr	r2, [pc, #204]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 80003fc:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000400:	fb01 f303 	mul.w	r3, r1, r3
 8000404:	4413      	add	r3, r2
 8000406:	330c      	adds	r3, #12
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
						}
					}

					ret = TcpIp_Bind(SoadSocketsConfig.SoadSocketList[socketInd].tcpipsocketID
 800040c:	89fb      	ldrh	r3, [r7, #14]
 800040e:	4a2e      	ldr	r2, [pc, #184]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 8000410:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000414:	fb01 f303 	mul.w	r3, r1, r3
 8000418:	4413      	add	r3, r2
 800041a:	3308      	adds	r3, #8
 800041c:	8818      	ldrh	r0, [r3, #0]
 800041e:	89fb      	ldrh	r3, [r7, #14]
 8000420:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 8000422:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000426:	fb01 f303 	mul.w	r3, r1, r3
 800042a:	4413      	add	r3, r2
 800042c:	3315      	adds	r3, #21
 800042e:	7819      	ldrb	r1, [r3, #0]
							,SoadSocketsConfig.SoadSocketList[socketInd].sockConnectionGroup.SoAdSocketLocalAddressRef.TcpIpAddrId
							,&(SoadSocketsConfig.SoadSocketList[socketInd].sockConnectionGroup.SoAdSocketLocalPort));
 8000430:	89fb      	ldrh	r3, [r7, #14]
					ret = TcpIp_Bind(SoadSocketsConfig.SoadSocketList[socketInd].tcpipsocketID
 8000432:	f44f 62c6 	mov.w	r2, #1584	; 0x630
 8000436:	fb02 f303 	mul.w	r3, r2, r3
 800043a:	3310      	adds	r3, #16
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 800043e:	4413      	add	r3, r2
 8000440:	461a      	mov	r2, r3
 8000442:	f001 f867 	bl	8001514 <TcpIp_Bind>
 8000446:	4603      	mov	r3, r0
 8000448:	737b      	strb	r3, [r7, #13]

					if(TRUE == SoadSocketsConfig.SoadSocketList[socketInd].sockTcpConfig.SoAdSocketTcpInitiate){
 800044a:	89fb      	ldrh	r3, [r7, #14]
 800044c:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 800044e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000452:	fb01 f303 	mul.w	r3, r1, r3
 8000456:	4413      	add	r3, r2
 8000458:	3341      	adds	r3, #65	; 0x41
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d119      	bne.n	8000494 <SoAd_MainFunction+0x194>
						genericAddress = (TcpIp_SockAddrType*)&(SoadSocketsConfig.SoadSocketList[socketInd].sockConnectionGroup.SoAd_SocketConnection.SoAd_SocketRemoteAddress);
 8000460:	89fb      	ldrh	r3, [r7, #14]
 8000462:	f44f 62c6 	mov.w	r2, #1584	; 0x630
 8000466:	fb02 f303 	mul.w	r3, r2, r3
 800046a:	3320      	adds	r3, #32
 800046c:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 800046e:	4413      	add	r3, r2
 8000470:	3306      	adds	r3, #6
 8000472:	60bb      	str	r3, [r7, #8]
						ret = TcpIp_TcpConnect(SoadSocketsConfig.SoadSocketList[socketInd].tcpipsocketID, genericAddress);
 8000474:	89fb      	ldrh	r3, [r7, #14]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 8000478:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800047c:	fb01 f303 	mul.w	r3, r1, r3
 8000480:	4413      	add	r3, r2
 8000482:	3308      	adds	r3, #8
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	68b9      	ldr	r1, [r7, #8]
 8000488:	4618      	mov	r0, r3
 800048a:	f001 f86d 	bl	8001568 <TcpIp_TcpConnect>
 800048e:	4603      	mov	r3, r0
 8000490:	737b      	strb	r3, [r7, #13]
 8000492:	e00e      	b.n	80004b2 <SoAd_MainFunction+0x1b2>
					}
					else{
						ret = TcpIp_TcpListen (SoadSocketsConfig.SoadSocketList[socketInd].tcpipsocketID, SoAdSoConMax);
 8000494:	89fb      	ldrh	r3, [r7, #14]
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <SoAd_MainFunction+0x1c8>)
 8000498:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800049c:	fb01 f303 	mul.w	r3, r1, r3
 80004a0:	4413      	add	r3, r2
 80004a2:	3308      	adds	r3, #8
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	2101      	movs	r1, #1
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 f903 	bl	80016b4 <TcpIp_TcpListen>
 80004ae:	4603      	mov	r3, r0
 80004b0:	737b      	strb	r3, [r7, #13]
	for(socketInd = 0; socketInd < SoAdSoConMax; socketInd++){
 80004b2:	89fb      	ldrh	r3, [r7, #14]
 80004b4:	3301      	adds	r3, #1
 80004b6:	81fb      	strh	r3, [r7, #14]
 80004b8:	89fb      	ldrh	r3, [r7, #14]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f43f af26 	beq.w	800030c <SoAd_MainFunction+0xc>
					}
				}
			}
		}
	}
}
 80004c0:	bf00      	nop
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000d30 	.word	0x20000d30

080004cc <SoAd_TcpAccepted>:

Std_ReturnType SoAd_TcpAccepted (TcpIp_SocketIdType SocketId,
		TcpIp_SocketIdType SocketIdConnected,const TcpIp_SockAddrType* RemoteAddrPtr){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	603a      	str	r2, [r7, #0]
 80004d6:	80fb      	strh	r3, [r7, #6]
 80004d8:	460b      	mov	r3, r1
 80004da:	80bb      	strh	r3, [r7, #4]
		/*
            Det Error
		 */
	}

	for(index = 0; index < SoAdSoConMax; index++){
 80004dc:	2300      	movs	r3, #0
 80004de:	81fb      	strh	r3, [r7, #14]
 80004e0:	e025      	b.n	800052e <SoAd_TcpAccepted+0x62>
		if(SoadSocketsConfig.SoadSocketList[index].tcpipsocketID == SocketId )
 80004e2:	89fb      	ldrh	r3, [r7, #14]
 80004e4:	4a18      	ldr	r2, [pc, #96]	; (8000548 <SoAd_TcpAccepted+0x7c>)
 80004e6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80004ea:	fb01 f303 	mul.w	r3, r1, r3
 80004ee:	4413      	add	r3, r2
 80004f0:	3308      	adds	r3, #8
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	88fa      	ldrh	r2, [r7, #6]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d116      	bne.n	8000528 <SoAd_TcpAccepted+0x5c>
		{
			id = index;
 80004fa:	89fb      	ldrh	r3, [r7, #14]
 80004fc:	81bb      	strh	r3, [r7, #12]
			SoadSocketsConfig.SoadSocketList[id].socketMode = SOAD_SOCON_ONLINE;
 80004fe:	89bb      	ldrh	r3, [r7, #12]
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <SoAd_TcpAccepted+0x7c>)
 8000502:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000506:	fb01 f303 	mul.w	r3, r1, r3
 800050a:	4413      	add	r3, r2
 800050c:	330a      	adds	r3, #10
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
			SoadSocketsConfig.SoadSocketList[id].state = SOCKET_Aquired;
 8000512:	89bb      	ldrh	r3, [r7, #12]
 8000514:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <SoAd_TcpAccepted+0x7c>)
 8000516:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800051a:	fb01 f303 	mul.w	r3, r1, r3
 800051e:	4413      	add	r3, r2
 8000520:	330c      	adds	r3, #12
 8000522:	2202      	movs	r2, #2
 8000524:	701a      	strb	r2, [r3, #0]
			break;
 8000526:	e005      	b.n	8000534 <SoAd_TcpAccepted+0x68>
	for(index = 0; index < SoAdSoConMax; index++){
 8000528:	89fb      	ldrh	r3, [r7, #14]
 800052a:	3301      	adds	r3, #1
 800052c:	81fb      	strh	r3, [r7, #14]
 800052e:	89fb      	ldrh	r3, [r7, #14]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0d6      	beq.n	80004e2 <SoAd_TcpAccepted+0x16>
		}
	}
	PduR_SoConModeChg (id, SOAD_SOCON_ONLINE);
 8000534:	89bb      	ldrh	r3, [r7, #12]
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f95b 	bl	80007f4 <PduR_SoConModeChg>

	return E_OK;
 800053e:	2301      	movs	r3, #1
}
 8000540:	4618      	mov	r0, r3
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000d30 	.word	0x20000d30

0800054c <SoAd_TcpConnected>:

void SoAd_TcpConnected (TcpIp_SocketIdType SocketId){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
		/*
            Det Error
		 */
	}

	for(index = 0; index < SoAdSoConMax; index++){
 8000556:	2300      	movs	r3, #0
 8000558:	81fb      	strh	r3, [r7, #14]
 800055a:	e025      	b.n	80005a8 <SoAd_TcpConnected+0x5c>
		if(SoadSocketsConfig.SoadSocketList[index].tcpipsocketID == SocketId )
 800055c:	89fb      	ldrh	r3, [r7, #14]
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <SoAd_TcpConnected+0x74>)
 8000560:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000564:	fb01 f303 	mul.w	r3, r1, r3
 8000568:	4413      	add	r3, r2
 800056a:	3308      	adds	r3, #8
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	88fa      	ldrh	r2, [r7, #6]
 8000570:	429a      	cmp	r2, r3
 8000572:	d116      	bne.n	80005a2 <SoAd_TcpConnected+0x56>
		{
			id = index;
 8000574:	89fb      	ldrh	r3, [r7, #14]
 8000576:	81bb      	strh	r3, [r7, #12]
			SoadSocketsConfig.SoadSocketList[id].socketMode = SOAD_SOCON_ONLINE;
 8000578:	89bb      	ldrh	r3, [r7, #12]
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <SoAd_TcpConnected+0x74>)
 800057c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000580:	fb01 f303 	mul.w	r3, r1, r3
 8000584:	4413      	add	r3, r2
 8000586:	330a      	adds	r3, #10
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
			SoadSocketsConfig.SoadSocketList[index].state = SOCKET_Aquired;
 800058c:	89fb      	ldrh	r3, [r7, #14]
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <SoAd_TcpConnected+0x74>)
 8000590:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000594:	fb01 f303 	mul.w	r3, r1, r3
 8000598:	4413      	add	r3, r2
 800059a:	330c      	adds	r3, #12
 800059c:	2202      	movs	r2, #2
 800059e:	701a      	strb	r2, [r3, #0]
			break;
 80005a0:	e005      	b.n	80005ae <SoAd_TcpConnected+0x62>
	for(index = 0; index < SoAdSoConMax; index++){
 80005a2:	89fb      	ldrh	r3, [r7, #14]
 80005a4:	3301      	adds	r3, #1
 80005a6:	81fb      	strh	r3, [r7, #14]
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0d6      	beq.n	800055c <SoAd_TcpConnected+0x10>
		}
	}
	PduR_SoConModeChg(id, SOAD_SOCON_ONLINE);
 80005ae:	89bb      	ldrh	r3, [r7, #12]
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f91e 	bl	80007f4 <PduR_SoConModeChg>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000d30 	.word	0x20000d30

080005c4 <SoAd_TxConfirmation>:

void SoAd_TxConfirmation (TcpIp_SocketIdType SocketId, uint16 Length){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	460a      	mov	r2, r1
 80005ce:	80fb      	strh	r3, [r7, #6]
 80005d0:	4613      	mov	r3, r2
 80005d2:	80bb      	strh	r3, [r7, #4]
        Det Error
		 */
	}
	SoAd_SoConIdType	index;
	SoAd_SoConIdType	id;
	for(index = 0; index < SoAdSoConMax; index++){
 80005d4:	2300      	movs	r3, #0
 80005d6:	81fb      	strh	r3, [r7, #14]
 80005d8:	e011      	b.n	80005fe <SoAd_TxConfirmation+0x3a>
		if(SoadSocketsConfig.SoadSocketList[index].tcpipsocketID == SocketId )
 80005da:	89fb      	ldrh	r3, [r7, #14]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <SoAd_TxConfirmation+0x68>)
 80005de:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	4413      	add	r3, r2
 80005e8:	3308      	adds	r3, #8
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	88fa      	ldrh	r2, [r7, #6]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d102      	bne.n	80005f8 <SoAd_TxConfirmation+0x34>
		{
			id = index;
 80005f2:	89fb      	ldrh	r3, [r7, #14]
 80005f4:	81bb      	strh	r3, [r7, #12]
			break;
 80005f6:	e005      	b.n	8000604 <SoAd_TxConfirmation+0x40>
	for(index = 0; index < SoAdSoConMax; index++){
 80005f8:	89fb      	ldrh	r3, [r7, #14]
 80005fa:	3301      	adds	r3, #1
 80005fc:	81fb      	strh	r3, [r7, #14]
 80005fe:	89fb      	ldrh	r3, [r7, #14]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0ea      	beq.n	80005da <SoAd_TxConfirmation+0x16>
		}
	}
	PduIdType PduId = SoadSocketsConfig.SoadSocketList[id].PduTxID;
 8000604:	89bb      	ldrh	r3, [r7, #12]
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <SoAd_TxConfirmation+0x68>)
 8000608:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800060c:	fb01 f303 	mul.w	r3, r1, r3
 8000610:	4413      	add	r3, r2
 8000612:	334e      	adds	r3, #78	; 0x4e
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	72fb      	strb	r3, [r7, #11]
	PduR_SoAdIfTxConfirmation (PduId, E_OK);
 8000618:	7afb      	ldrb	r3, [r7, #11]
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f8dc 	bl	80007da <PduR_SoAdIfTxConfirmation>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000d30 	.word	0x20000d30

08000630 <ExtractDataTo_SoAdBuffer>:


Std_ReturnType ExtractDataTo_SoAdBuffer(SoAd_SoConIdType socketInd, const uint8* DataPtr, uint32 DataLength){
 8000630:	b480      	push	{r7}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	81fb      	strh	r3, [r7, #14]

	SoadSocketsConfig.SoadSocketList[socketInd].SoAd_Buffer.acquired = TRUE;
 800063e:	89fb      	ldrh	r3, [r7, #14]
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <ExtractDataTo_SoAdBuffer+0xb0>)
 8000642:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000646:	fb01 f303 	mul.w	r3, r1, r3
 800064a:	4413      	add	r3, r2
 800064c:	3350      	adds	r3, #80	; 0x50
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
	uint16 bufferCtr = SoadSocketsConfig.SoadSocketList[socketInd].SoAd_Buffer.bufferPtrIdx;
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <ExtractDataTo_SoAdBuffer+0xb0>)
 8000656:	3301      	adds	r3, #1
 8000658:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800065c:	fb01 f303 	mul.w	r3, r1, r3
 8000660:	4413      	add	r3, r2
 8000662:	3304      	adds	r3, #4
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	82fb      	strh	r3, [r7, #22]
	uint16 dataCtr = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	82bb      	strh	r3, [r7, #20]

	for(bufferCtr; dataCtr < (DataLength); bufferCtr++, dataCtr++){
 800066c:	e015      	b.n	800069a <ExtractDataTo_SoAdBuffer+0x6a>
		*(SoadSocketsConfig.SoadSocketList[socketInd].SoAd_Buffer.SoAdData + bufferCtr) = *(DataPtr+dataCtr);
 800066e:	8abb      	ldrh	r3, [r7, #20]
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	441a      	add	r2, r3
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800067a:	fb01 f303 	mul.w	r3, r1, r3
 800067e:	3350      	adds	r3, #80	; 0x50
 8000680:	4917      	ldr	r1, [pc, #92]	; (80006e0 <ExtractDataTo_SoAdBuffer+0xb0>)
 8000682:	440b      	add	r3, r1
 8000684:	1c59      	adds	r1, r3, #1
 8000686:	8afb      	ldrh	r3, [r7, #22]
 8000688:	440b      	add	r3, r1
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	701a      	strb	r2, [r3, #0]
	for(bufferCtr; dataCtr < (DataLength); bufferCtr++, dataCtr++){
 800068e:	8afb      	ldrh	r3, [r7, #22]
 8000690:	3301      	adds	r3, #1
 8000692:	82fb      	strh	r3, [r7, #22]
 8000694:	8abb      	ldrh	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	82bb      	strh	r3, [r7, #20]
 800069a:	8abb      	ldrh	r3, [r7, #20]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d8e5      	bhi.n	800066e <ExtractDataTo_SoAdBuffer+0x3e>
	}
	SoadSocketsConfig.SoadSocketList[socketInd].SoAd_Buffer.bufferPtrIdx = bufferCtr;
 80006a2:	89fb      	ldrh	r3, [r7, #14]
 80006a4:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <ExtractDataTo_SoAdBuffer+0xb0>)
 80006a6:	3301      	adds	r3, #1
 80006a8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80006ac:	fb01 f303 	mul.w	r3, r1, r3
 80006b0:	4413      	add	r3, r2
 80006b2:	3304      	adds	r3, #4
 80006b4:	8afa      	ldrh	r2, [r7, #22]
 80006b6:	801a      	strh	r2, [r3, #0]
	dataCtr = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	82bb      	strh	r3, [r7, #20]

	SoadSocketsConfig.SoadSocketList[socketInd].SoAd_Buffer.buffReady = TRUE;
 80006bc:	89fb      	ldrh	r3, [r7, #14]
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <ExtractDataTo_SoAdBuffer+0xb0>)
 80006c0:	3301      	adds	r3, #1
 80006c2:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80006c6:	fb01 f303 	mul.w	r3, r1, r3
 80006ca:	4413      	add	r3, r2
 80006cc:	3306      	adds	r3, #6
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	371c      	adds	r7, #28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000d30 	.word	0x20000d30

080006e4 <SoAd_RxIndication>:

void SoAd_RxIndication (TcpIp_SocketIdType SocketId ,const TcpIp_SockAddrType* RemoteAddrPtr
		,const uint8* BufPtr, uint16 Length)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4603      	mov	r3, r0
 80006f2:	81fb      	strh	r3, [r7, #14]
 80006f4:	4613      	mov	r3, r2
 80006f6:	81bb      	strh	r3, [r7, #12]
	TcpIp_SockAddrInetType* remoteAdr = (TcpIp_SockAddrInetType*)RemoteAddrPtr;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	61bb      	str	r3, [r7, #24]
	SoAd_SoConIdType socketInd;
	PduIdType	RxPduId;
	PduInfoType* PduInfoPtr;
	Std_ReturnType ret;
	for(socketInd = 0; socketInd < SoAdSoConMax; socketInd++){
 80006fc:	2300      	movs	r3, #0
 80006fe:	83fb      	strh	r3, [r7, #30]
 8000700:	e02e      	b.n	8000760 <SoAd_RxIndication+0x7c>

		if(SoadSocketsConfig.SoadSocketList[socketInd].tcpipsocketID == SocketId){
 8000702:	8bfb      	ldrh	r3, [r7, #30]
 8000704:	4a2e      	ldr	r2, [pc, #184]	; (80007c0 <SoAd_RxIndication+0xdc>)
 8000706:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	4413      	add	r3, r2
 8000710:	3308      	adds	r3, #8
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	89fa      	ldrh	r2, [r7, #14]
 8000716:	429a      	cmp	r2, r3
 8000718:	d11f      	bne.n	800075a <SoAd_RxIndication+0x76>
			ExtractDataTo_SoAdBuffer(socketInd, BufPtr, Length);
 800071a:	89ba      	ldrh	r2, [r7, #12]
 800071c:	8bfb      	ldrh	r3, [r7, #30]
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff85 	bl	8000630 <ExtractDataTo_SoAdBuffer>
			RxPduId = SoadSocketsConfig.SoadSocketList[socketInd].PduTxID+1;/*Ay habd*/
 8000726:	8bfb      	ldrh	r3, [r7, #30]
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <SoAd_RxIndication+0xdc>)
 800072a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800072e:	fb01 f303 	mul.w	r3, r1, r3
 8000732:	4413      	add	r3, r2
 8000734:	334e      	adds	r3, #78	; 0x4e
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	777b      	strb	r3, [r7, #29]
			PduInfoPtr->SduDataPtr = SoadSocketsConfig.SoadSocketList[socketInd].SoAd_Buffer.bufferPtr;
 800073c:	8bfb      	ldrh	r3, [r7, #30]
 800073e:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <SoAd_RxIndication+0xdc>)
 8000740:	3301      	adds	r3, #1
 8000742:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000746:	fb01 f303 	mul.w	r3, r1, r3
 800074a:	4413      	add	r3, r2
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	605a      	str	r2, [r3, #4]
			PduInfoPtr->SduLength = Length;
 8000752:	89bb      	ldrh	r3, [r7, #12]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	701a      	strb	r2, [r3, #0]
	for(socketInd = 0; socketInd < SoAdSoConMax; socketInd++){
 800075a:	8bfb      	ldrh	r3, [r7, #30]
 800075c:	3301      	adds	r3, #1
 800075e:	83fb      	strh	r3, [r7, #30]
 8000760:	8bfb      	ldrh	r3, [r7, #30]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0cd      	beq.n	8000702 <SoAd_RxIndication+0x1e>
		}
	}

	PduR_SoAdIfRxIndication ( RxPduId , PduInfoPtr);
 8000766:	7f7b      	ldrb	r3, [r7, #29]
 8000768:	6979      	ldr	r1, [r7, #20]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f82a 	bl	80007c4 <PduR_SoAdIfRxIndication>
	SoadSocketsConfig.SoadSocketList[socketInd].SoAd_Buffer.acquired = FALSE;
 8000770:	8bfb      	ldrh	r3, [r7, #30]
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <SoAd_RxIndication+0xdc>)
 8000774:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8000778:	fb01 f303 	mul.w	r3, r1, r3
 800077c:	4413      	add	r3, r2
 800077e:	3350      	adds	r3, #80	; 0x50
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
	SoadSocketsConfig.SoadSocketList[socketInd].SoAd_Buffer.buffReady = FALSE;
 8000784:	8bfb      	ldrh	r3, [r7, #30]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <SoAd_RxIndication+0xdc>)
 8000788:	3301      	adds	r3, #1
 800078a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800078e:	fb01 f303 	mul.w	r3, r1, r3
 8000792:	4413      	add	r3, r2
 8000794:	3306      	adds	r3, #6
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
	TcpIp_TcpReceived(SoadSocketsConfig.SoadSocketList[socketInd].tcpipsocketID, Length);
 800079a:	8bfb      	ldrh	r3, [r7, #30]
 800079c:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <SoAd_RxIndication+0xdc>)
 800079e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80007a2:	fb01 f303 	mul.w	r3, r1, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	3308      	adds	r3, #8
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	89ba      	ldrh	r2, [r7, #12]
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fd75 	bl	80022a0 <TcpIp_TcpReceived>

}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000d30 	.word	0x20000d30

080007c4 <PduR_SoAdIfRxIndication>:
#include "stm32f103x6.h"
#include "Stm32_F103C6_gpio_driver.h"
#include "Stm32_F103C6_EXTI_driver.h"
#include "Stm32_F103C6_USART_driver.h"

void PduR_SoAdIfRxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr){
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]


}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <PduR_SoAdIfTxConfirmation>:

void PduR_SoAdIfTxConfirmation (PduIdType TxPduId,Std_ReturnType result){
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	460a      	mov	r2, r1
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	4613      	mov	r3, r2
 80007e8:	71bb      	strb	r3, [r7, #6]

}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <PduR_SoConModeChg>:

void PduR_LocalIpAddrAssignmentChg ( SoAd_SoConIdType SoConId, TcpIp_IpAddrStateType State){


}
void PduR_SoConModeChg (SoAd_SoConIdType SoConId, SoAd_SoConModeType Mode){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	80fb      	strh	r3, [r7, #6]
 8000800:	4613      	mov	r3, r2
 8000802:	717b      	strb	r3, [r7, #5]

	 MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_IS_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2102      	movs	r1, #2
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <PduR_SoConModeChg+0x24>)
 800080a:	f000 fcd2 	bl	80011b2 <MCAL_GPIO_WritePin>

}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40010c00 	.word	0x40010c00

0800081c <callback>:
uint8_t g_counter = 0;
uint8_t buff[40] = {0};
uint8_t x;
uint8 handshaking = FALSE;

void callback(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af02      	add	r7, sp, #8

	MCAL_USART_RecieveData(USART1, &x, disable);
 8000822:	2201      	movs	r2, #1
 8000824:	4920      	ldr	r1, [pc, #128]	; (80008a8 <callback+0x8c>)
 8000826:	4821      	ldr	r0, [pc, #132]	; (80008ac <callback+0x90>)
 8000828:	f000 fb6a 	bl	8000f00 <MCAL_USART_RecieveData>
	buff[g_counter] = x;
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <callback+0x94>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <callback+0x8c>)
 8000834:	7819      	ldrb	r1, [r3, #0]
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <callback+0x98>)
 8000838:	5499      	strb	r1, [r3, r2]
	g_counter++;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <callback+0x94>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <callback+0x94>)
 8000844:	701a      	strb	r2, [r3, #0]

	if(handshaking == FALSE){
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <callback+0x9c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d114      	bne.n	8000878 <callback+0x5c>
		if(g_counter == 20){
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <callback+0x94>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b14      	cmp	r3, #20
 8000854:	d124      	bne.n	80008a0 <callback+0x84>
			TcpIp_RxIndication(0,0,0,0, buff, 20);
 8000856:	2314      	movs	r3, #20
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <callback+0x98>)
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2300      	movs	r3, #0
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f001 fa89 	bl	8001d7c <TcpIp_RxIndication>
			g_counter = 0;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <callback+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
			handshaking = TRUE;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <callback+0x9c>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
			TcpIp_RxIndication(0,0,0,0, buff, 40);
			handshaking = FALSE;
			g_counter = 0;
		}
	}
}
 8000876:	e013      	b.n	80008a0 <callback+0x84>
		if(g_counter == 40){
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <callback+0x94>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b28      	cmp	r3, #40	; 0x28
 800087e:	d10f      	bne.n	80008a0 <callback+0x84>
			TcpIp_RxIndication(0,0,0,0, buff, 40);
 8000880:	2328      	movs	r3, #40	; 0x28
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <callback+0x98>)
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2300      	movs	r3, #0
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2000      	movs	r0, #0
 8000890:	f001 fa74 	bl	8001d7c <TcpIp_RxIndication>
			handshaking = FALSE;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <callback+0x9c>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
			g_counter = 0;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <callback+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20001368 	.word	0x20001368
 80008ac:	40013800 	.word	0x40013800
 80008b0:	200000ac 	.word	0x200000ac
 80008b4:	200000b0 	.word	0x200000b0
 80008b8:	200000d8 	.word	0x200000d8

080008bc <main>:

int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <main+0x90>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	4a21      	ldr	r2, [pc, #132]	; (800094c <main+0x90>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <main+0x90>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4a1e      	ldr	r2, [pc, #120]	; (800094c <main+0x90>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <main+0x90>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	4a1b      	ldr	r2, [pc, #108]	; (800094c <main+0x90>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6193      	str	r3, [r2, #24]

	GPIO_PinConfig_t PinConfig;
	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80008e6:	2302      	movs	r3, #2
 80008e8:	82bb      	strh	r3, [r7, #20]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008ea:	2304      	movs	r3, #4
 80008ec:	75bb      	strb	r3, [r7, #22]
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_2M;
 80008ee:	2302      	movs	r3, #2
 80008f0:	75fb      	strb	r3, [r7, #23]
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4815      	ldr	r0, [pc, #84]	; (8000950 <main+0x94>)
 80008fa:	f000 fbb0 	bl	800105e <MCAL_GPIO_Init>

	USART_Config USART1_Config;
	USART1_Config.BaudRate = USART_BaudRate_9600;
 80008fe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000902:	607b      	str	r3, [r7, #4]
	USART1_Config.HwFlowCtl = USART_HwFlowCtl_None;
 8000904:	2300      	movs	r3, #0
 8000906:	72fb      	strb	r3, [r7, #11]
	USART1_Config.P_IRQ_CallBack = callback;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <main+0x98>)
 800090a:	613b      	str	r3, [r7, #16]
	USART1_Config.IRQ_Enable = USART_IRQ_Enable_RXEINE;
 800090c:	2320      	movs	r3, #32
 800090e:	733b      	strb	r3, [r7, #12]
	USART1_Config.Parity = USART_Parity_NONE;
 8000910:	2300      	movs	r3, #0
 8000912:	727b      	strb	r3, [r7, #9]
	USART1_Config.PayLoad_Length = USART_PayLoad_Length_8B;
 8000914:	2300      	movs	r3, #0
 8000916:	723b      	strb	r3, [r7, #8]
	USART1_Config.Stop_Bits = USART_StopBits_1;
 8000918:	2300      	movs	r3, #0
 800091a:	72bb      	strb	r3, [r7, #10]
	USART1_Config.USART_Mode = USART_MODE_TX_RX;
 800091c:	230c      	movs	r3, #12
 800091e:	703b      	strb	r3, [r7, #0]
	MCAL_USART_Init(USART1, &USART1_Config);
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <main+0x9c>)
 8000926:	f000 f9e5 	bl	8000cf4 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <main+0x9c>)
 800092c:	f000 faa4 	bl	8000e78 <MCAL_USART_GPIO_Set_Pins>

	SoAd_Init(&SoAdConfigPtr);
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <main+0xa0>)
 8000932:	f7ff fc77 	bl	8000224 <SoAd_Init>
	SoAd_OpenSoCon(SoAdConfigPtr.SoAd_SockConnGroup[0].SoAd_SocketConnection.SoAdSocketId);
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <main+0xa0>)
 8000938:	8a9b      	ldrh	r3, [r3, #20]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fcb0 	bl	80002a0 <SoAd_OpenSoCon>


	while(1){

		SoAd_MainFunction();
 8000940:	f7ff fcde 	bl	8000300 <SoAd_MainFunction>
		TcpIp_MainFunction();
 8000944:	f000 fef4 	bl	8001730 <TcpIp_MainFunction>
	while(1){
 8000948:	e7fa      	b.n	8000940 <main+0x84>
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	40010c00 	.word	0x40010c00
 8000954:	0800081d 	.word	0x0800081d
 8000958:	40013800 	.word	0x40013800
 800095c:	20000000 	.word	0x20000000

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f001 fca6 	bl	80022e0 <__errno>
 8000994:	4602      	mov	r2, r0
 8000996:	230c      	movs	r3, #12
 8000998:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20002800 	.word	0x20002800
 80009c0:	00000400 	.word	0x00000400
 80009c4:	200000dc 	.word	0x200000dc
 80009c8:	200013b0 	.word	0x200013b0

080009cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	; (8000a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <LoopForever+0xe>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	; (8000a18 <LoopForever+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009fa:	f001 fc77 	bl	80022ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff ff5d 	bl	80008bc <main>

08000a02 <LoopForever>:

LoopForever:
    b LoopForever
 8000a02:	e7fe      	b.n	8000a02 <LoopForever>
  ldr   r0, =_estack
 8000a04:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000a10:	08002518 	.word	0x08002518
  ldr r2, =_sbss
 8000a14:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000a18:	200013ac 	.word	0x200013ac

08000a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC1_2_IRQHandler>
	...

08000a20 <EXTI0_IRQHandler>:
 * ==================================================================
 * 								ISR Functions
 * ==================================================================
 */

void EXTI0_IRQHandler(void){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

	//Clear PR
	EXTI->PR |= (1 << 0);
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <EXTI0_IRQHandler+0x1c>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <EXTI0_IRQHandler+0x1c>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <EXTI0_IRQHandler+0x20>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4798      	blx	r3

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40010400 	.word	0x40010400
 8000a40:	2000136c 	.word	0x2000136c

08000a44 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

	//Clear PR
	EXTI->PR |= (1 << 1);
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <EXTI1_IRQHandler+0x1c>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <EXTI1_IRQHandler+0x1c>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <EXTI1_IRQHandler+0x20>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4798      	blx	r3

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010400 	.word	0x40010400
 8000a64:	2000136c 	.word	0x2000136c

08000a68 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

	//Clear PR
	EXTI->PR |= (1 << 2);
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <EXTI2_IRQHandler+0x1c>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <EXTI2_IRQHandler+0x1c>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <EXTI2_IRQHandler+0x20>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	4798      	blx	r3
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40010400 	.word	0x40010400
 8000a88:	2000136c 	.word	0x2000136c

08000a8c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

	//Clear PR
	EXTI->PR |= (1 << 3);
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <EXTI3_IRQHandler+0x1c>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <EXTI3_IRQHandler+0x1c>)
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <EXTI3_IRQHandler+0x20>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4798      	blx	r3
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40010400 	.word	0x40010400
 8000aac:	2000136c 	.word	0x2000136c

08000ab0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

	//Clear PR
	EXTI->PR |= (1 << 4);
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <EXTI4_IRQHandler+0x1c>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <EXTI4_IRQHandler+0x1c>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <EXTI4_IRQHandler+0x20>)
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	4798      	blx	r3
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40010400 	.word	0x40010400
 8000ad0:	2000136c 	.word	0x2000136c

08000ad4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

	if (EXTI->PR & 1<<5 ) {EXTI->PR |= (1<<5);	GP_IRQ_CallBack[5]();	}
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d008      	beq.n	8000af6 <EXTI9_5_IRQHandler+0x22>
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	6153      	str	r3, [r2, #20]
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {EXTI->PR |= (1<<6);	GP_IRQ_CallBack[6]();	}
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d008      	beq.n	8000b14 <EXTI9_5_IRQHandler+0x40>
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {EXTI->PR |= (1<<7);	GP_IRQ_CallBack[7]();	}
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d008      	beq.n	8000b32 <EXTI9_5_IRQHandler+0x5e>
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2a:	6153      	str	r3, [r2, #20]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {EXTI->PR |= (1<<8);	GP_IRQ_CallBack[8]();	}
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d008      	beq.n	8000b50 <EXTI9_5_IRQHandler+0x7c>
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {EXTI->PR |= (1<<9);	GP_IRQ_CallBack[9]();	}
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d008      	beq.n	8000b6e <EXTI9_5_IRQHandler+0x9a>
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <EXTI9_5_IRQHandler+0xa0>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6153      	str	r3, [r2, #20]
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <EXTI9_5_IRQHandler+0xa4>)
 8000b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6c:	4798      	blx	r3

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010400 	.word	0x40010400
 8000b78:	2000136c 	.word	0x2000136c

08000b7c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

	if (EXTI->PR & 1<<10 ) {EXTI->PR |= (1<<10);	GP_IRQ_CallBack[10]();	}
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d008      	beq.n	8000b9e <EXTI15_10_IRQHandler+0x22>
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4a29      	ldr	r2, [pc, #164]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b96:	6153      	str	r3, [r2, #20]
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {EXTI->PR |= (1<<11);	GP_IRQ_CallBack[11]();	}
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d008      	beq.n	8000bbc <EXTI15_10_IRQHandler+0x40>
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bba:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {EXTI->PR |= (1<<12);	GP_IRQ_CallBack[12]();	}
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d008      	beq.n	8000bda <EXTI15_10_IRQHandler+0x5e>
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd2:	6153      	str	r3, [r2, #20]
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {EXTI->PR |= (1<<13);	GP_IRQ_CallBack[13]();	}
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d008      	beq.n	8000bf8 <EXTI15_10_IRQHandler+0x7c>
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bf0:	6153      	str	r3, [r2, #20]
 8000bf2:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {EXTI->PR |= (1<<14);	GP_IRQ_CallBack[14]();	}
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d008      	beq.n	8000c16 <EXTI15_10_IRQHandler+0x9a>
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6153      	str	r3, [r2, #20]
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c14:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {EXTI->PR |= (1<<15);	GP_IRQ_CallBack[15]();	}
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d008      	beq.n	8000c34 <EXTI15_10_IRQHandler+0xb8>
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <EXTI15_10_IRQHandler+0xbc>)
 8000c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c2c:	6153      	str	r3, [r2, #20]
 8000c2e:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <EXTI15_10_IRQHandler+0xc0>)
 8000c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c32:	4798      	blx	r3

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010400 	.word	0x40010400
 8000c3c:	2000136c 	.word	0x2000136c

08000c40 <MCAL_RCC_GetSYS_CLKFreq>:
 * 							  Generic Functions
 * ==================================================================
 */


uint32_t MCAL_RCC_GetSYS_CLKFreq(void){
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11)
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d006      	beq.n	8000c60 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d302      	bcc.n	8000c5c <MCAL_RCC_GetSYS_CLKFreq+0x1c>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d004      	beq.n	8000c64 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000c5a:	e005      	b.n	8000c68 <MCAL_RCC_GetSYS_CLKFreq+0x28>
	{
	case 0:
		return HSI_RC_CLK;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000c5e:	e003      	b.n	8000c68 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;
	case 1:
		return HSE_CLK;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000c62:	e001      	b.n	8000c68 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;
	case 2:
		return 16000000;
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000c66:	e7ff      	b.n	8000c68 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		break;
	}
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40021000 	.word	0x40021000
 8000c74:	007a1200 	.word	0x007a1200
 8000c78:	00f42400 	.word	0x00f42400

08000c7c <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[(RCC->CFGR >> 4) & 0xF]);
 8000c80:	f7ff ffde 	bl	8000c40 <MCAL_RCC_GetSYS_CLKFreq>
 8000c84:	4601      	mov	r1, r0
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <MCAL_RCC_GetHCLKFreq+0x20>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	4a03      	ldr	r2, [pc, #12]	; (8000ca0 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	08002500 	.word	0x08002500

08000ca4 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 8000ca8:	f7ff ffe8 	bl	8000c7c <MCAL_RCC_GetHCLKFreq>
 8000cac:	4601      	mov	r1, r0
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	080024f8 	.word	0x080024f8

08000ccc <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]);
 8000cd0:	f7ff ffd4 	bl	8000c7c <MCAL_RCC_GetHCLKFreq>
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	0adb      	lsrs	r3, r3, #11
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000ce2:	5cd3      	ldrb	r3, [r2, r3]
 8000ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	080024f8 	.word	0x080024f8

08000cf4 <MCAL_USART_Init>:
 * @param [in]		-
 * @retval			-
 * Note				-
 */

void MCAL_USART_Init(USART_TypeDef* USARTx, USART_Config* USART_Config){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]

	uint32_t pclk, BRR;
	uint32_t USARTDIV, USARTDIV_MUL100, USARTDIV_Integer_MUL100, USARTDIV_Fraction;

	Global_USART_Config = USART_Config;
 8000cfe:	4a57      	ldr	r2, [pc, #348]	; (8000e5c <MCAL_USART_Init+0x168>)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6013      	str	r3, [r2, #0]

	//Enable Clk for the given USART Peripheral
	if(USARTx == USART1){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a56      	ldr	r2, [pc, #344]	; (8000e60 <MCAL_USART_Init+0x16c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d106      	bne.n	8000d1a <MCAL_USART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000d0c:	4b55      	ldr	r3, [pc, #340]	; (8000e64 <MCAL_USART_Init+0x170>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a54      	ldr	r2, [pc, #336]	; (8000e64 <MCAL_USART_Init+0x170>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	e014      	b.n	8000d44 <MCAL_USART_Init+0x50>
	}
	else if(USARTx == USART2){
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a52      	ldr	r2, [pc, #328]	; (8000e68 <MCAL_USART_Init+0x174>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d106      	bne.n	8000d30 <MCAL_USART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000d22:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <MCAL_USART_Init+0x170>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a4f      	ldr	r2, [pc, #316]	; (8000e64 <MCAL_USART_Init+0x170>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	e009      	b.n	8000d44 <MCAL_USART_Init+0x50>
	}
	else if(USARTx == USART3){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a4e      	ldr	r2, [pc, #312]	; (8000e6c <MCAL_USART_Init+0x178>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d105      	bne.n	8000d44 <MCAL_USART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000d38:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <MCAL_USART_Init+0x170>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <MCAL_USART_Init+0x170>)
 8000d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d42:	6193      	str	r3, [r2, #24]
	}

	//Enable USART Module
	USARTx->CR1 |= (1<<13);	// Enable UE Bit
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	60da      	str	r2, [r3, #12]

	//Enable TX/RX
	USARTx->CR1 |= USART_Config->USART_Mode;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60da      	str	r2, [r3, #12]

	//Payload Width (Data Width)
	USARTx->CR1 |= USART_Config->PayLoad_Length;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	7a12      	ldrb	r2, [r2, #8]
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	60da      	str	r2, [r3, #12]

	//Configure Parity Control Bit Fields
	USARTx->CR1 |= USART_Config->Parity;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	7a52      	ldrb	r2, [r2, #9]
 8000d74:	431a      	orrs	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60da      	str	r2, [r3, #12]

	//Configure Number of Stop Bits
	USARTx->CR2 |= USART_Config->Stop_Bits;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	7a92      	ldrb	r2, [r2, #10]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	611a      	str	r2, [r3, #16]

	//USART Flow Control
	USARTx->CR3 |= USART_Config->HwFlowCtl;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	7ad2      	ldrb	r2, [r2, #11]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	615a      	str	r2, [r3, #20]

	//Configure BaudRate of BRR
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if (USARTx == USART1){
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a31      	ldr	r2, [pc, #196]	; (8000e60 <MCAL_USART_Init+0x16c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d103      	bne.n	8000da6 <MCAL_USART_Init+0xb2>
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000d9e:	f7ff ff95 	bl	8000ccc <MCAL_RCC_GetPCLK2Freq>
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	e002      	b.n	8000dac <MCAL_USART_Init+0xb8>
	}
	else{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000da6:	f7ff ff7d 	bl	8000ca4 <MCAL_RCC_GetPCLK1Freq>
 8000daa:	60f8      	str	r0, [r7, #12]
//	USARTDIV_Integer_MUL100 = (uint32_t)(USARTDIV*100);
//	USARTDIV_Fraction = (uint32_t)((USARTDIV_MUL100 - USARTDIV_Integer_MUL100)*16)/100; //Fraction Part
//
//	USARTx->BRR = ((USARTDIV << 4) | (USARTDIV_Fraction & 0xF));

	BRR = UART_BRR_Register(pclk, USART_Config->BaudRate) ;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db8:	0119      	lsls	r1, r3, #4
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009a      	lsls	r2, r3, #2
 8000dc4:	441a      	add	r2, r3
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ddc:	2064      	movs	r0, #100	; 0x64
 8000dde:	fb00 f303 	mul.w	r3, r0, r3
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <MCAL_USART_Init+0x17c>)
 8000de8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dec:	095b      	lsrs	r3, r3, #5
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	430b      	orrs	r3, r1
 8000df4:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	609a      	str	r2, [r3, #8]

	//Enable/Disable Interrupt
	//USART_CR1
	if(USART_Config->IRQ_Enable != USART_IRQ_Enable_NONE ){
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	7b1b      	ldrb	r3, [r3, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d026      	beq.n	8000e52 <MCAL_USART_Init+0x15e>

		USARTx->CR1 |= USART_Config->IRQ_Enable;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	7b12      	ldrb	r2, [r2, #12]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60da      	str	r2, [r3, #12]

		//Enable NVIC for USART IRQ
		if(USARTx == USART1){
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <MCAL_USART_Init+0x16c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d106      	bne.n	8000e28 <MCAL_USART_Init+0x134>
			NVIC_IRQ37_USART1_Enable;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MCAL_USART_Init+0x180>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MCAL_USART_Init+0x180>)
 8000e20:	f043 0320 	orr.w	r3, r3, #32
 8000e24:	6013      	str	r3, [r2, #0]
		else if(USARTx == USART3){
			NVIC_IRQ39_USART3_Enable;
		}
	}

}
 8000e26:	e014      	b.n	8000e52 <MCAL_USART_Init+0x15e>
		else if(USARTx == USART2){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <MCAL_USART_Init+0x174>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d106      	bne.n	8000e3e <MCAL_USART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MCAL_USART_Init+0x180>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MCAL_USART_Init+0x180>)
 8000e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	e009      	b.n	8000e52 <MCAL_USART_Init+0x15e>
		else if(USARTx == USART3){
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <MCAL_USART_Init+0x178>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d105      	bne.n	8000e52 <MCAL_USART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MCAL_USART_Init+0x180>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <MCAL_USART_Init+0x180>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e50:	6013      	str	r3, [r2, #0]
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000e0 	.word	0x200000e0
 8000e60:	40013800 	.word	0x40013800
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	51eb851f 	.word	0x51eb851f
 8000e74:	e000e104 	.word	0xe000e104

08000e78 <MCAL_USART_GPIO_Set_Pins>:
		RCC_USART3_CLK_Reset();
		NVIC_IRQ39_USART3_Disable;
	}
}

void MCAL_USART_GPIO_Set_Pins(USART_TypeDef* USARTx){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t	PinConfig;

	if (USARTx == USART1){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <MCAL_USART_GPIO_Set_Pins+0x48>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d117      	bne.n	8000eb8 <MCAL_USART_GPIO_Set_Pins+0x40>
		//PA9	TX
		//PA10	RX
		//PA11	CTS
		//PA12	RTS
		//if(Global_USART_Config->USART_Mode == USART_MODE_TX || Global_USART_Config->USART_Mode == USART_MODE_TX_RX ){
			PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8c:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_AFIO_OUTPUT_PP;
 8000e8e:	2306      	movs	r3, #6
 8000e90:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed= GPIO_SPEED_10M;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <MCAL_USART_GPIO_Set_Pins+0x4c>)
 8000e9e:	f000 f8de 	bl	800105e <MCAL_GPIO_Init>
		//}
		//if(Global_USART_Config->USART_Mode == USART_MODE_RX || Global_USART_Config->USART_Mode == USART_MODE_TX_RX ){
			PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_AFIO_INPUT;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MCAL_USART_GPIO_Set_Pins+0x4c>)
 8000eb4:	f000 f8d3 	bl	800105e <MCAL_GPIO_Init>
	}
	else if (USARTx == USART3){

	}

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <MCAL_USART_SendData>:


void MCAL_USART_SendData(USART_TypeDef* USARTx, uint16_t* pTxBuffer, enum Polling_Mechanism	PollingEn){
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	71fb      	strb	r3, [r7, #7]

	//Wait TXE Flag is Set
	if (PollingEn == enable){
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <MCAL_USART_SendData+0x22>
		while(! (USARTx->SR & 1<<7) );
 8000edc:	bf00      	nop
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <MCAL_USART_SendData+0x16>

		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else{

		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	605a      	str	r2, [r3, #4]

	}
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
	...

08000f00 <MCAL_USART_RecieveData>:


void MCAL_USART_RecieveData(USART_TypeDef* USARTx, uint16_t* pRxBuffer, enum Polling_Mechanism	PollingEn){
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	71fb      	strb	r3, [r7, #7]

	//Wait until RXNE Flag is set
	if(PollingEn == enable)
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d106      	bne.n	8000f22 <MCAL_USART_RecieveData+0x22>
	{
		while(! (USARTx->SR & 1<<5) );
 8000f14:	bf00      	nop
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0320 	and.w	r3, r3, #32
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f9      	beq.n	8000f16 <MCAL_USART_RecieveData+0x16>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);

		}
	}else{

		if(Global_USART_Config->Parity == USART_Parity_NONE){
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <MCAL_USART_RecieveData+0x58>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	7a5b      	ldrb	r3, [r3, #9]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d107      	bne.n	8000f3c <MCAL_USART_RecieveData+0x3c>

			// If no Parity all bits are considered
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	801a      	strh	r2, [r3, #0]
			//If Parity is enabled, only 7 bits are considered
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);

		}
	}
}
 8000f3a:	e007      	b.n	8000f4c <MCAL_USART_RecieveData+0x4c>
			*((uint16_t*)pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	801a      	strh	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200000e0 	.word	0x200000e0

08000f5c <USART1_IRQHandler>:

}

// USART ISR Handler

void USART1_IRQHandler(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

	Global_USART_Config->P_IRQ_CallBack();
 8000f60:	4b02      	ldr	r3, [pc, #8]	; (8000f6c <USART1_IRQHandler+0x10>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4798      	blx	r3

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000e0 	.word	0x200000e0

08000f70 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

	Global_USART_Config->P_IRQ_CallBack();
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <USART2_IRQHandler+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4798      	blx	r3

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000e0 	.word	0x200000e0

08000f84 <USART3_IRQHandler>:

void USART3_IRQHandler(void){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

	Global_USART_Config->P_IRQ_CallBack();
 8000f88:	4b02      	ldr	r3, [pc, #8]	; (8000f94 <USART3_IRQHandler+0x10>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	4798      	blx	r3

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200000e0 	.word	0x200000e0

08000f98 <Get_CRLH_Position>:
 *  Created on: Jul 23, 2023
 *      Author: Mohamed Salah
 */
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]

	switch(PinNumber){
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	2b80      	cmp	r3, #128	; 0x80
 8000fa6:	d042      	beq.n	800102e <Get_CRLH_Position+0x96>
 8000fa8:	2b80      	cmp	r3, #128	; 0x80
 8000faa:	dc11      	bgt.n	8000fd0 <Get_CRLH_Position+0x38>
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d036      	beq.n	800101e <Get_CRLH_Position+0x86>
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	dc06      	bgt.n	8000fc2 <Get_CRLH_Position+0x2a>
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d02e      	beq.n	8001016 <Get_CRLH_Position+0x7e>
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d02e      	beq.n	800101a <Get_CRLH_Position+0x82>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d028      	beq.n	8001012 <Get_CRLH_Position+0x7a>
 8000fc0:	e047      	b.n	8001052 <Get_CRLH_Position+0xba>
 8000fc2:	2b20      	cmp	r3, #32
 8000fc4:	d02f      	beq.n	8001026 <Get_CRLH_Position+0x8e>
 8000fc6:	2b40      	cmp	r3, #64	; 0x40
 8000fc8:	d02f      	beq.n	800102a <Get_CRLH_Position+0x92>
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d029      	beq.n	8001022 <Get_CRLH_Position+0x8a>
 8000fce:	e040      	b.n	8001052 <Get_CRLH_Position+0xba>
 8000fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fd4:	d033      	beq.n	800103e <Get_CRLH_Position+0xa6>
 8000fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fda:	dc09      	bgt.n	8000ff0 <Get_CRLH_Position+0x58>
 8000fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe0:	d029      	beq.n	8001036 <Get_CRLH_Position+0x9e>
 8000fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe6:	d028      	beq.n	800103a <Get_CRLH_Position+0xa2>
 8000fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fec:	d021      	beq.n	8001032 <Get_CRLH_Position+0x9a>
 8000fee:	e030      	b.n	8001052 <Get_CRLH_Position+0xba>
 8000ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff4:	d027      	beq.n	8001046 <Get_CRLH_Position+0xae>
 8000ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ffa:	dc03      	bgt.n	8001004 <Get_CRLH_Position+0x6c>
 8000ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001000:	d01f      	beq.n	8001042 <Get_CRLH_Position+0xaa>
 8001002:	e026      	b.n	8001052 <Get_CRLH_Position+0xba>
 8001004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001008:	d01f      	beq.n	800104a <Get_CRLH_Position+0xb2>
 800100a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800100e:	d01e      	beq.n	800104e <Get_CRLH_Position+0xb6>
 8001010:	e01f      	b.n	8001052 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8001012:	2300      	movs	r3, #0
 8001014:	e01e      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8001016:	2304      	movs	r3, #4
 8001018:	e01c      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800101a:	2308      	movs	r3, #8
 800101c:	e01a      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800101e:	230c      	movs	r3, #12
 8001020:	e018      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8001022:	2310      	movs	r3, #16
 8001024:	e016      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8001026:	2314      	movs	r3, #20
 8001028:	e014      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800102a:	2318      	movs	r3, #24
 800102c:	e012      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800102e:	231c      	movs	r3, #28
 8001030:	e010      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8001032:	2300      	movs	r3, #0
 8001034:	e00e      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8001036:	2304      	movs	r3, #4
 8001038:	e00c      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 800103a:	2308      	movs	r3, #8
 800103c:	e00a      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 800103e:	230c      	movs	r3, #12
 8001040:	e008      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8001042:	2310      	movs	r3, #16
 8001044:	e006      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8001046:	2314      	movs	r3, #20
 8001048:	e004      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 800104a:	2318      	movs	r3, #24
 800104c:	e002      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800104e:	231c      	movs	r3, #28
 8001050:	e000      	b.n	8001054 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <MCAL_GPIO_Init>:
 * 							the configuration information for the specified PIN
 * @retval			-None
 * Note				-Stm32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 							But LQFP48 Package has only GPIO A, B, Part of C, D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig){
 800105e:	b590      	push	{r4, r7, lr}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]

	volatile uint32_t* configregister = NULL;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
	uint8_t Pin_config = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	72fb      	strb	r3, [r7, #11]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)?	&GPIOx->CRL:&GPIOx->CRH;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	2bff      	cmp	r3, #255	; 0xff
 8001076:	d801      	bhi.n	800107c <MCAL_GPIO_Init+0x1e>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	e001      	b.n	8001080 <MCAL_GPIO_Init+0x22>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3304      	adds	r3, #4
 8001080:	60fb      	str	r3, [r7, #12]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff86 	bl	8000f98 <Get_CRLH_Position>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	230f      	movs	r3, #15
 8001092:	4093      	lsls	r3, r2
 8001094:	43da      	mvns	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	401a      	ands	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	601a      	str	r2, [r3, #0]


	// If Pin is Output
	if ((PinConfig->GPIO_MODE) == GPIO_MODE_AFIO_OUTPUT_PP || (PinConfig->GPIO_MODE) == GPIO_MODE_AFIO_OUTPUT_OD || (PinConfig->GPIO_MODE) == GPIO_MODE_OUTPUT_OD || (PinConfig->GPIO_MODE) == GPIO_MODE_OUTPUT_PP){
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	789b      	ldrb	r3, [r3, #2]
 80010a4:	2b06      	cmp	r3, #6
 80010a6:	d00b      	beq.n	80010c0 <MCAL_GPIO_Init+0x62>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	789b      	ldrb	r3, [r3, #2]
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	d007      	beq.n	80010c0 <MCAL_GPIO_Init+0x62>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d003      	beq.n	80010c0 <MCAL_GPIO_Init+0x62>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d11c      	bne.n	80010fa <MCAL_GPIO_Init+0x9c>

		Pin_config = ( ( ( (PinConfig->GPIO_MODE - 4) << 2) | PinConfig->GPIO_Output_Speed) & 0x0f);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	789b      	ldrb	r3, [r3, #2]
 80010c4:	3b04      	subs	r3, #4
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	b25a      	sxtb	r2, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	78db      	ldrb	r3, [r3, #3]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= ( (Pin_config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80010dc:	7afc      	ldrb	r4, [r7, #11]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff58 	bl	8000f98 <Get_CRLH_Position>
 80010e8:	4603      	mov	r3, r0
 80010ea:	fa04 f203 	lsl.w	r2, r4, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e057      	b.n	80011aa <MCAL_GPIO_Init+0x14c>
	}
	// if pin is input
	else{
		if ((PinConfig->GPIO_MODE) == GPIO_MODE_Analog || (PinConfig->GPIO_MODE) == GPIO_MODE_INPUT_FLO  ){
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	789b      	ldrb	r3, [r3, #2]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <MCAL_GPIO_Init+0xac>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	789b      	ldrb	r3, [r3, #2]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d115      	bne.n	8001136 <MCAL_GPIO_Init+0xd8>
			Pin_config = ( ( ( (PinConfig->GPIO_MODE) << 2) | 0x0) & 0x0f);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	72fb      	strb	r3, [r7, #11]


			(*configregister) |= ((Pin_config) << (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 8001118:	7afc      	ldrb	r4, [r7, #11]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff3a 	bl	8000f98 <Get_CRLH_Position>
 8001124:	4603      	mov	r3, r0
 8001126:	fa04 f203 	lsl.w	r2, r4, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	431a      	orrs	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e039      	b.n	80011aa <MCAL_GPIO_Init+0x14c>
		}
		else if((PinConfig->GPIO_MODE) == GPIO_MODE_AFIO_INPUT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	789b      	ldrb	r3, [r3, #2]
 800113a:	2b08      	cmp	r3, #8
 800113c:	d110      	bne.n	8001160 <MCAL_GPIO_Init+0x102>
		{
			Pin_config = (((GPIO_MODE_INPUT_FLO << 2) | 0x0) & 0x0f);
 800113e:	2304      	movs	r3, #4
 8001140:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= ((Pin_config) << (Get_CRLH_Position(PinConfig->GPIO_PinNumber)));
 8001142:	7afc      	ldrb	r4, [r7, #11]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff25 	bl	8000f98 <Get_CRLH_Position>
 800114e:	4603      	mov	r3, r0
 8001150:	fa04 f203 	lsl.w	r2, r4, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	431a      	orrs	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	601a      	str	r2, [r3, #0]
			{
				(GPIOx->ODR) &= ~(PinConfig->GPIO_PinNumber);
			}
		}
	}
}
 800115e:	e024      	b.n	80011aa <MCAL_GPIO_Init+0x14c>
			Pin_config = ( ( (GPIO_MODE_INPUT_PU << 2) | 0x0) & 0x0f);
 8001160:	2308      	movs	r3, #8
 8001162:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= ( (Pin_config) << (Get_CRLH_Position(PinConfig->GPIO_PinNumber) ) );
 8001164:	7afc      	ldrb	r4, [r7, #11]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff14 	bl	8000f98 <Get_CRLH_Position>
 8001170:	4603      	mov	r3, r0
 8001172:	fa04 f203 	lsl.w	r2, r4, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	431a      	orrs	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	601a      	str	r2, [r3, #0]
			if ((PinConfig->GPIO_MODE) == GPIO_MODE_INPUT_PU){
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	789b      	ldrb	r3, [r3, #2]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d107      	bne.n	8001198 <MCAL_GPIO_Init+0x13a>
				(GPIOx->ODR) |= (PinConfig->GPIO_PinNumber);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	8812      	ldrh	r2, [r2, #0]
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60da      	str	r2, [r3, #12]
}
 8001196:	e008      	b.n	80011aa <MCAL_GPIO_Init+0x14c>
				(GPIOx->ODR) &= ~(PinConfig->GPIO_PinNumber);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	8812      	ldrh	r2, [r2, #0]
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	401a      	ands	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	60da      	str	r2, [r3, #12]
}
 80011a8:	e7ff      	b.n	80011aa <MCAL_GPIO_Init+0x14c>
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}

080011b2 <MCAL_GPIO_WritePin>:
 * @param [in]		-PinNumber: Set Pin Number according to @ref GPIO_PINS_define
 * @param [in]		-Value: 0 or 1
 * @retval			-None
 * Note				-None
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t PinNumber, uint8_t Value){
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]
 80011be:	4613      	mov	r3, r2
 80011c0:	707b      	strb	r3, [r7, #1]

	if(Value != GPIO_PIN_IS_RESET){
 80011c2:	787b      	ldrb	r3, [r7, #1]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <MCAL_GPIO_WritePin+0x24>
		GPIOx->ODR |= PinNumber;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	60da      	str	r2, [r3, #12]
	}
	else{
		GPIOx->ODR &= ~PinNumber;
	}
}
 80011d4:	e006      	b.n	80011e4 <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~PinNumber;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	43d2      	mvns	r2, r2
 80011de:	401a      	ands	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	60da      	str	r2, [r3, #12]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
	...

080011f0 <getAvailableSocket>:

static TcpIp_LocalAddr TcpIpLocalAddr_list[2];
static TcpIp_Buffer TcpIpBuffer[TcpIpTcpSocketMax];


static TcpIp_SocketIdType getAvailableSocket(){
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0

	TcpIp_SocketIdType curInd;
	TcpIp_SocketIdType availableSocket = 100;
 80011f6:	2364      	movs	r3, #100	; 0x64
 80011f8:	80bb      	strh	r3, [r7, #4]

	for(curInd = 0; curInd < TcpIpTcpSocketMax; curInd++){
 80011fa:	2300      	movs	r3, #0
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	e010      	b.n	8001222 <getAvailableSocket+0x32>
		if(FALSE == socket_list[curInd].used){
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	490c      	ldr	r1, [pc, #48]	; (8001234 <getAvailableSocket+0x44>)
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	440b      	add	r3, r1
 800120e:	3318      	adds	r3, #24
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <getAvailableSocket+0x2c>
			availableSocket = curInd;
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	80bb      	strh	r3, [r7, #4]
			break;
 800121a:	e005      	b.n	8001228 <getAvailableSocket+0x38>
	for(curInd = 0; curInd < TcpIpTcpSocketMax; curInd++){
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	3301      	adds	r3, #1
 8001220:	80fb      	strh	r3, [r7, #6]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d9eb      	bls.n	8001200 <getAvailableSocket+0x10>
		}
	}
	return availableSocket;
 8001228:	88bb      	ldrh	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	20000cb4 	.word	0x20000cb4

08001238 <TcpIp_GetPacket_Header>:
		return FALSE;
	}
}
#endif

static Std_ReturnType TcpIp_GetPacket_Header(TcpIp_SocketIdType SocketId, uint8 flags, uint32 seqNum, uint8** bufPtr){
 8001238:	b480      	push	{r7}
 800123a:	b08d      	sub	sp, #52	; 0x34
 800123c:	af00      	add	r7, sp, #0
 800123e:	60ba      	str	r2, [r7, #8]
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4603      	mov	r3, r0
 8001244:	81fb      	strh	r3, [r7, #14]
 8001246:	460b      	mov	r3, r1
 8001248:	737b      	strb	r3, [r7, #13]

	TcpHeader segment;
	uint8* segmentByte = (uint8*)&segment;
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28

	if(TcpIpTcpSocketMax <= SocketId)
 8001250:	89fb      	ldrh	r3, [r7, #14]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d901      	bls.n	800125a <TcpIp_GetPacket_Header+0x22>
	{
		return E_NOT_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e05f      	b.n	800131a <TcpIp_GetPacket_Header+0xe2>
	}

	if(FALSE == socket_list[SocketId].used)
 800125a:	89fa      	ldrh	r2, [r7, #14]
 800125c:	4931      	ldr	r1, [pc, #196]	; (8001324 <TcpIp_GetPacket_Header+0xec>)
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	440b      	add	r3, r1
 8001268:	3318      	adds	r3, #24
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <TcpIp_GetPacket_Header+0x3c>
	{
		return E_NOT_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	e052      	b.n	800131a <TcpIp_GetPacket_Header+0xe2>
	}

#if TcpIpIpV4Enabled == TRUE
	segment.srcPort = socket_list[SocketId].localIpV4Address.port;
 8001274:	89fa      	ldrh	r2, [r7, #14]
 8001276:	492b      	ldr	r1, [pc, #172]	; (8001324 <TcpIp_GetPacket_Header+0xec>)
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	330a      	adds	r3, #10
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	82bb      	strh	r3, [r7, #20]
	segment.destPort = socket_list[SocketId].remoteIpV4Address.port;
 8001288:	89fa      	ldrh	r2, [r7, #14]
 800128a:	4926      	ldr	r1, [pc, #152]	; (8001324 <TcpIp_GetPacket_Header+0xec>)
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	1a9b      	subs	r3, r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	3312      	adds	r3, #18
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	82fb      	strh	r3, [r7, #22]
#if TcpIpIpV6Enabled == TRUE
	segment.srcPort = socket_list[SocketId].localIpV6Address.port;
	segment.destPort = socket_list[SocketId].remoteIpV6Address.port;
#endif

	segment.seqNum = seqNum;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	61bb      	str	r3, [r7, #24]

	if((flags & TCPIP_ACK_FLAG))
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00b      	beq.n	80012c2 <TcpIp_GetPacket_Header+0x8a>
	{
		segment.ackNum = socket_list[SocketId].curSeqNum + 1;
 80012aa:	89fa      	ldrh	r2, [r7, #14]
 80012ac:	491d      	ldr	r1, [pc, #116]	; (8001324 <TcpIp_GetPacket_Header+0xec>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	331c      	adds	r3, #28
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	e001      	b.n	80012c6 <TcpIp_GetPacket_Header+0x8e>
	}
	else{
		segment.ackNum = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
	}

	segment.headerLength = sizeof(TcpHeader) / 4;
 80012c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012ca:	2205      	movs	r2, #5
 80012cc:	f362 1307 	bfi	r3, r2, #4, #4
 80012d0:	f887 3020 	strb.w	r3, [r7, #32]
	segment.flags = flags;
 80012d4:	7b7b      	ldrb	r3, [r7, #13]
 80012d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80012e0:	f362 0305 	bfi	r3, r2, #0, #6
 80012e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	segment.windowSize = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	847b      	strh	r3, [r7, #34]	; 0x22
	segment.checkSum = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	segment.urgentPointer = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	84fb      	strh	r3, [r7, #38]	; 0x26

	for(uint16 curByte = 0; curByte < sizeof(TcpHeader); curByte++){
 80012f4:	2300      	movs	r3, #0
 80012f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80012f8:	e00b      	b.n	8001312 <TcpIp_GetPacket_Header+0xda>
		(*bufPtr)[curByte] = segmentByte[curByte];
 80012fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fe:	441a      	add	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001306:	440b      	add	r3, r1
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	701a      	strb	r2, [r3, #0]
	for(uint16 curByte = 0; curByte < sizeof(TcpHeader); curByte++){
 800130c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800130e:	3301      	adds	r3, #1
 8001310:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001314:	2b13      	cmp	r3, #19
 8001316:	d9f0      	bls.n	80012fa <TcpIp_GetPacket_Header+0xc2>
	}

	return E_OK;	
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	3734      	adds	r7, #52	; 0x34
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000cb4 	.word	0x20000cb4

08001328 <TcpIp_DecodePacket>:
	return E_OK;
}



static Std_ReturnType TcpIp_DecodePacket(TcpIp_SocketIdType SocketId, const uint8* bufPtr){
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	80fb      	strh	r3, [r7, #6]

	TcpHeader* segmentPtr;

	if(NULL_ptr == bufPtr){
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <TcpIp_DecodePacket+0x16>
		return E_NOT_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e05d      	b.n	80013fa <TcpIp_DecodePacket+0xd2>
	}

	// Decode Network Header

	segmentPtr = (TcpHeader*)bufPtr;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	60fb      	str	r3, [r7, #12]

	if(segmentPtr->destPort != socket_list[SocketId].localIpV4Address.port){
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8859      	ldrh	r1, [r3, #2]
 8001346:	88fa      	ldrh	r2, [r7, #6]
 8001348:	482e      	ldr	r0, [pc, #184]	; (8001404 <TcpIp_DecodePacket+0xdc>)
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4403      	add	r3, r0
 8001354:	330a      	adds	r3, #10
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	4299      	cmp	r1, r3
 800135a:	d001      	beq.n	8001360 <TcpIp_DecodePacket+0x38>
		return E_NOT_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	e04c      	b.n	80013fa <TcpIp_DecodePacket+0xd2>
	}

	if(socket_list[SocketId].state == TCPIP_SOCKET_LISTEN){
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	4928      	ldr	r1, [pc, #160]	; (8001404 <TcpIp_DecodePacket+0xdc>)
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	3319      	adds	r3, #25
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d10b      	bne.n	800138e <TcpIp_DecodePacket+0x66>
		socket_list[SocketId].remoteIpV4Address.port = segmentPtr->srcPort;
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8818      	ldrh	r0, [r3, #0]
 800137c:	4921      	ldr	r1, [pc, #132]	; (8001404 <TcpIp_DecodePacket+0xdc>)
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	3312      	adds	r3, #18
 800138a:	4602      	mov	r2, r0
 800138c:	801a      	strh	r2, [r3, #0]
	}

	if(segmentPtr->srcPort != socket_list[SocketId].remoteIpV4Address.port){
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8819      	ldrh	r1, [r3, #0]
 8001392:	88fa      	ldrh	r2, [r7, #6]
 8001394:	481b      	ldr	r0, [pc, #108]	; (8001404 <TcpIp_DecodePacket+0xdc>)
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4403      	add	r3, r0
 80013a0:	3312      	adds	r3, #18
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	4299      	cmp	r1, r3
 80013a6:	d001      	beq.n	80013ac <TcpIp_DecodePacket+0x84>
		return E_NOT_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e026      	b.n	80013fa <TcpIp_DecodePacket+0xd2>
	}

	socket_list[SocketId].curSeqNum = segmentPtr->seqNum;
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6859      	ldr	r1, [r3, #4]
 80013b2:	4814      	ldr	r0, [pc, #80]	; (8001404 <TcpIp_DecodePacket+0xdc>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	1a9b      	subs	r3, r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4403      	add	r3, r0
 80013be:	331c      	adds	r3, #28
 80013c0:	6019      	str	r1, [r3, #0]
	socket_list[SocketId].curAckNum = segmentPtr->ackNum;
 80013c2:	88fa      	ldrh	r2, [r7, #6]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6899      	ldr	r1, [r3, #8]
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <TcpIp_DecodePacket+0xdc>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4403      	add	r3, r0
 80013d4:	3320      	adds	r3, #32
 80013d6:	6019      	str	r1, [r3, #0]

	socket_list[SocketId].curFlags = segmentPtr->flags;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	7b5b      	ldrb	r3, [r3, #13]
 80013dc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	88fa      	ldrh	r2, [r7, #6]
 80013e4:	4618      	mov	r0, r3
 80013e6:	4907      	ldr	r1, [pc, #28]	; (8001404 <TcpIp_DecodePacket+0xdc>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	3324      	adds	r3, #36	; 0x24
 80013f4:	4602      	mov	r2, r0
 80013f6:	701a      	strb	r2, [r3, #0]

	// Make CheckSum	

	return E_OK;
 80013f8:	2301      	movs	r3, #1
} 
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000cb4 	.word	0x20000cb4

08001408 <TcpIp_EthIf_CopyToBuffer>:


static void TcpIp_EthIf_CopyToBuffer(uint8** ethifPtr, uint8** tcpPtr, uint16 length){
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	4613      	mov	r3, r2
 8001414:	80fb      	strh	r3, [r7, #6]

	for(uint16 curByte = 0; curByte < length; curByte++){
 8001416:	2300      	movs	r3, #0
 8001418:	82fb      	strh	r3, [r7, #22]
 800141a:	e00c      	b.n	8001436 <TcpIp_EthIf_CopyToBuffer+0x2e>
		(*ethifPtr)[curByte] = (*tcpPtr)[curByte];
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	8afb      	ldrh	r3, [r7, #22]
 8001422:	441a      	add	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6819      	ldr	r1, [r3, #0]
 8001428:	8afb      	ldrh	r3, [r7, #22]
 800142a:	440b      	add	r3, r1
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	701a      	strb	r2, [r3, #0]
	for(uint16 curByte = 0; curByte < length; curByte++){
 8001430:	8afb      	ldrh	r3, [r7, #22]
 8001432:	3301      	adds	r3, #1
 8001434:	82fb      	strh	r3, [r7, #22]
 8001436:	8afa      	ldrh	r2, [r7, #22]
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	429a      	cmp	r2, r3
 800143c:	d3ee      	bcc.n	800141c <TcpIp_EthIf_CopyToBuffer+0x14>
	}

}
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <TcpIp_SoAdGetSocket>:


/* Description: TCP/IP stack is requested to allocate a new socket. Note: Each
accepted incoming TCP connection also allocates a socket resource.*/
Std_ReturnType TcpIp_SoAdGetSocket (TcpIp_DomainType Domain, TcpIp_ProtocolType Protocol, TcpIp_SocketIdType* SocketIdPtr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	603a      	str	r2, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	460b      	mov	r3, r1
 8001456:	71bb      	strb	r3, [r7, #6]
		which requires a SocketId. Note: SocketIdPtr is only valid if return
		value is E_OK.*/
	TcpIp_SocketIdType sockIndex;	/*Specifies the available Socket Index*/
	uint8 error_code;

	if(Domain != TCPIP_AF_INET && Domain != TCPIP_AF_INET6){
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <TcpIp_SoAdGetSocket+0x24>
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d003      	beq.n	800146c <TcpIp_SoAdGetSocket+0x24>
		/* Address family not supported by protocol family */
		error_code = TCPIP_E_AFNOSUPPORT;
 8001464:	230e      	movs	r3, #14
 8001466:	73fb      	strb	r3, [r7, #15]
		/*
			Call Det API
		 */
		return E_NOT_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	e04c      	b.n	8001506 <TcpIp_SoAdGetSocket+0xbe>
	}

	if (Protocol != TCPIP_IPPROTO_TCP && Protocol != TCPIP_IPPROTO_UDP){
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	2b06      	cmp	r3, #6
 8001470:	d006      	beq.n	8001480 <TcpIp_SoAdGetSocket+0x38>
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	2b11      	cmp	r3, #17
 8001476:	d003      	beq.n	8001480 <TcpIp_SoAdGetSocket+0x38>
		/* Protocol wrong type for socket */
		error_code = TCPIP_E_PROTOTYPE;
 8001478:	2308      	movs	r3, #8
 800147a:	73fb      	strb	r3, [r7, #15]
		/*
			Call Det API
		 */
		return E_NOT_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	e042      	b.n	8001506 <TcpIp_SoAdGetSocket+0xbe>
	}

	sockIndex = getAvailableSocket();
 8001480:	f7ff feb6 	bl	80011f0 <getAvailableSocket>
 8001484:	4603      	mov	r3, r0
 8001486:	81bb      	strh	r3, [r7, #12]

	socket_list[sockIndex].domain = Domain;
 8001488:	89ba      	ldrh	r2, [r7, #12]
 800148a:	4921      	ldr	r1, [pc, #132]	; (8001510 <TcpIp_SoAdGetSocket+0xc8>)
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	701a      	strb	r2, [r3, #0]
	socket_list[sockIndex].protocol = Protocol;
 800149a:	89ba      	ldrh	r2, [r7, #12]
 800149c:	491c      	ldr	r1, [pc, #112]	; (8001510 <TcpIp_SoAdGetSocket+0xc8>)
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	1a9b      	subs	r3, r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	3301      	adds	r3, #1
 80014aa:	79ba      	ldrb	r2, [r7, #6]
 80014ac:	701a      	strb	r2, [r3, #0]
	socket_list[sockIndex].socketId = sockIndex;
 80014ae:	89ba      	ldrh	r2, [r7, #12]
 80014b0:	4917      	ldr	r1, [pc, #92]	; (8001510 <TcpIp_SoAdGetSocket+0xc8>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3302      	adds	r3, #2
 80014be:	89ba      	ldrh	r2, [r7, #12]
 80014c0:	801a      	strh	r2, [r3, #0]
	socket_list[sockIndex].used = TRUE; 
 80014c2:	89ba      	ldrh	r2, [r7, #12]
 80014c4:	4912      	ldr	r1, [pc, #72]	; (8001510 <TcpIp_SoAdGetSocket+0xc8>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3318      	adds	r3, #24
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
	socket_list[sockIndex].state = TCPIP_SOCKET_CLOSED;
 80014d6:	89ba      	ldrh	r2, [r7, #12]
 80014d8:	490d      	ldr	r1, [pc, #52]	; (8001510 <TcpIp_SoAdGetSocket+0xc8>)
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	3319      	adds	r3, #25
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
	socket_list[sockIndex].startRetransmissionTimeout = FALSE;
 80014ea:	89ba      	ldrh	r2, [r7, #12]
 80014ec:	4908      	ldr	r1, [pc, #32]	; (8001510 <TcpIp_SoAdGetSocket+0xc8>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	332c      	adds	r3, #44	; 0x2c
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
	*SocketIdPtr = sockIndex;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	89ba      	ldrh	r2, [r7, #12]
 8001502:	801a      	strh	r2, [r3, #0]

	return E_OK;
 8001504:	2301      	movs	r3, #1
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000cb4 	.word	0x20000cb4

08001514 <TcpIp_Bind>:


/* Description: By this API service the TCP/IP stack is requested to bind a UDP
or TCP socket to a local resource*/
Std_ReturnType TcpIp_Bind (TcpIp_SocketIdType SocketId, TcpIp_LocalAddrIdType LocalAddrId, uint16* PortPtr)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	603a      	str	r2, [r7, #0]
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	460b      	mov	r3, r1
 8001522:	717b      	strb	r3, [r7, #5]
	/*LocalAddrId: IP address identifier representing the local IP address and EthIf
		controller to bind the socket to*/
	/*Pointer to memory where the local port to which the socket shall
		be bound is specified*/	
	uint8 error_code;
	TcpIp_ReturnType Return_State = TCPIP_E_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]
	}
#endif

	/*Check if there is another socket already bound to the same port,
		protocol and local address for the TCP Protocol*/
	uint8 i = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	73bb      	strb	r3, [r7, #14]
				}
			}
		}
	}
	 */
	socket_list[SocketId].TcpIpAddrId = LocalAddrId;
 800152c:	88fa      	ldrh	r2, [r7, #6]
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <TcpIp_Bind+0x50>)
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	440b      	add	r3, r1
 800153a:	3304      	adds	r3, #4
 800153c:	797a      	ldrb	r2, [r7, #5]
 800153e:	701a      	strb	r2, [r3, #0]
	socket_list[SocketId].localIpV4Address.port = *PortPtr;
 8001540:	88fa      	ldrh	r2, [r7, #6]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	8818      	ldrh	r0, [r3, #0]
 8001546:	4907      	ldr	r1, [pc, #28]	; (8001564 <TcpIp_Bind+0x50>)
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	330a      	adds	r3, #10
 8001554:	4602      	mov	r2, r0
 8001556:	801a      	strh	r2, [r3, #0]
	return E_OK;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000cb4 	.word	0x20000cb4

08001568 <TcpIp_TcpConnect>:

/* Description: By this API service the TCP/IP stack is requested to establish
a TCP connection to the configured peer*/
Std_ReturnType TcpIp_TcpConnect (TcpIp_SocketIdType SocketId, const TcpIp_SockAddrType* RemoteAddrPtr){
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	80fb      	strh	r3, [r7, #6]
	/* SocketId: Socket identifier of the related local socket resource.
	   RemoteAddrPtr: IP address and port of the remote host to connect to.*/
	uint8 error_code; 
	if(SocketId >= TcpIpTcpSocketMax){
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d901      	bls.n	800157e <TcpIp_TcpConnect+0x16>
		return E_NOT_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e093      	b.n	80016a6 <TcpIp_TcpConnect+0x13e>
	}

	if (RemoteAddrPtr == NULL_ptr){
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d103      	bne.n	800158c <TcpIp_TcpConnect+0x24>
		error_code = TCPIP_E_PARAM_POINTER;
 8001584:	2302      	movs	r3, #2
 8001586:	73fb      	strb	r3, [r7, #15]
		/*
			Call Det API
		 */
		return E_NOT_OK;	
 8001588:	2300      	movs	r3, #0
 800158a:	e08c      	b.n	80016a6 <TcpIp_TcpConnect+0x13e>
	}

	if(socket_list[SocketId].used == FALSE){
 800158c:	88fa      	ldrh	r2, [r7, #6]
 800158e:	4948      	ldr	r1, [pc, #288]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	3318      	adds	r3, #24
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <TcpIp_TcpConnect+0x42>
		error_code = TCPIP_E_INV_ARG;
 80015a2:	2303      	movs	r3, #3
 80015a4:	73fb      	strb	r3, [r7, #15]
		/*
			Call Det API
		 */
		return E_NOT_OK;	
 80015a6:	2300      	movs	r3, #0
 80015a8:	e07d      	b.n	80016a6 <TcpIp_TcpConnect+0x13e>
	}

	if(socket_list[SocketId].state != TCPIP_SOCKET_CLOSED){
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	4940      	ldr	r1, [pc, #256]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	3319      	adds	r3, #25
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <TcpIp_TcpConnect+0x60>
		error_code = TCPIP_E_ISCONN;
 80015c0:	230b      	movs	r3, #11
 80015c2:	73fb      	strb	r3, [r7, #15]
		/*
			Call Det API
		 */
		return E_NOT_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e06e      	b.n	80016a6 <TcpIp_TcpConnect+0x13e>
	}

	/*Check the Domain Type*/
#if TcpIpIpV4Enabled == TRUE
	/*IPV4 is used*/
	if(RemoteAddrPtr->domain == TCPIP_AF_INET){
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d167      	bne.n	80016a0 <TcpIp_TcpConnect+0x138>
		TcpIp_SockAddrInetType* remoteAdr = (TcpIp_SockAddrInetType*)RemoteAddrPtr;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	60bb      	str	r3, [r7, #8]
		socket_list[SocketId].remoteIpV4Address.domain  = TCPIP_AF_INET;
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	4936      	ldr	r1, [pc, #216]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	3310      	adds	r3, #16
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
		socket_list[SocketId].remoteIpV4Address.addr[0] = remoteAdr->addr[0];
 80015e8:	88fa      	ldrh	r2, [r7, #6]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	7918      	ldrb	r0, [r3, #4]
 80015ee:	4930      	ldr	r1, [pc, #192]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3314      	adds	r3, #20
 80015fc:	4602      	mov	r2, r0
 80015fe:	701a      	strb	r2, [r3, #0]
		socket_list[SocketId].remoteIpV4Address.addr[1] = remoteAdr->addr[1];
 8001600:	88fa      	ldrh	r2, [r7, #6]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	7958      	ldrb	r0, [r3, #5]
 8001606:	492a      	ldr	r1, [pc, #168]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 8001608:	4613      	mov	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	3315      	adds	r3, #21
 8001614:	4602      	mov	r2, r0
 8001616:	701a      	strb	r2, [r3, #0]
		socket_list[SocketId].remoteIpV4Address.addr[2] = remoteAdr->addr[2];
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	7998      	ldrb	r0, [r3, #6]
 800161e:	4924      	ldr	r1, [pc, #144]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	3316      	adds	r3, #22
 800162c:	4602      	mov	r2, r0
 800162e:	701a      	strb	r2, [r3, #0]
		socket_list[SocketId].remoteIpV4Address.addr[3] = remoteAdr->addr[3];
 8001630:	88fa      	ldrh	r2, [r7, #6]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	79d8      	ldrb	r0, [r3, #7]
 8001636:	491e      	ldr	r1, [pc, #120]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	3317      	adds	r3, #23
 8001644:	4602      	mov	r2, r0
 8001646:	701a      	strb	r2, [r3, #0]
		socket_list[SocketId].remoteIpV4Address.port = remoteAdr->port;
 8001648:	88fa      	ldrh	r2, [r7, #6]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	8858      	ldrh	r0, [r3, #2]
 800164e:	4918      	ldr	r1, [pc, #96]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3312      	adds	r3, #18
 800165c:	4602      	mov	r2, r0
 800165e:	801a      	strh	r2, [r3, #0]
		 */
		return E_NOT_OK;
	}
#endif

	socket_list[SocketId].state = TCPIP_SOCKET_CONNECTED;
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	4913      	ldr	r1, [pc, #76]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3319      	adds	r3, #25
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
	socket_list[SocketId].curSeqNum = 0;
 8001674:	88fa      	ldrh	r2, [r7, #6]
 8001676:	490e      	ldr	r1, [pc, #56]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	331c      	adds	r3, #28
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
	socket_list[SocketId].curAckNum = 0;
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	4909      	ldr	r1, [pc, #36]	; (80016b0 <TcpIp_TcpConnect+0x148>)
 800168c:	4613      	mov	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	3320      	adds	r3, #32
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

	return E_OK;
 800169c:	2301      	movs	r3, #1
 800169e:	e002      	b.n	80016a6 <TcpIp_TcpConnect+0x13e>
		error_code = TCPIP_E_INV_ARG;
 80016a0:	2303      	movs	r3, #3
 80016a2:	73fb      	strb	r3, [r7, #15]
		return E_NOT_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000cb4 	.word	0x20000cb4

080016b4 <TcpIp_TcpListen>:

Std_ReturnType TcpIp_TcpListen (TcpIp_SocketIdType SocketId, uint16 MaxChannels){
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80bb      	strh	r3, [r7, #4]

	uint8 error_code;
	if(SocketId >= TcpIpTcpSocketMax){
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d901      	bls.n	80016ce <TcpIp_TcpListen+0x1a>
		return E_NOT_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e028      	b.n	8001720 <TcpIp_TcpListen+0x6c>
	}

	if(socket_list[SocketId].used == FALSE){
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	4916      	ldr	r1, [pc, #88]	; (800172c <TcpIp_TcpListen+0x78>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	3318      	adds	r3, #24
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <TcpIp_TcpListen+0x38>
		error_code = TCPIP_E_INV_ARG;
 80016e4:	2303      	movs	r3, #3
 80016e6:	73fb      	strb	r3, [r7, #15]
		/*
			Call Det API
		 */
		return E_NOT_OK;	
 80016e8:	2300      	movs	r3, #0
 80016ea:	e019      	b.n	8001720 <TcpIp_TcpListen+0x6c>
	}

	if(socket_list[SocketId].state != TCPIP_SOCKET_CLOSED){
 80016ec:	88fa      	ldrh	r2, [r7, #6]
 80016ee:	490f      	ldr	r1, [pc, #60]	; (800172c <TcpIp_TcpListen+0x78>)
 80016f0:	4613      	mov	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	3319      	adds	r3, #25
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <TcpIp_TcpListen+0x56>
		error_code = TCPIP_E_ISCONN;
 8001702:	230b      	movs	r3, #11
 8001704:	73fb      	strb	r3, [r7, #15]
		/*
			Call Det API
		 */
		return E_NOT_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e00a      	b.n	8001720 <TcpIp_TcpListen+0x6c>
	}

	socket_list[SocketId].state = TCPIP_SOCKET_LISTEN;
 800170a:	88fa      	ldrh	r2, [r7, #6]
 800170c:	4907      	ldr	r1, [pc, #28]	; (800172c <TcpIp_TcpListen+0x78>)
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3319      	adds	r3, #25
 800171a:	2203      	movs	r2, #3
 800171c:	701a      	strb	r2, [r3, #0]

	return E_OK;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000cb4 	.word	0x20000cb4

08001730 <TcpIp_MainFunction>:
	}
	return E_OK;
}


void TcpIp_MainFunction(void){
 8001730:	b580      	push	{r7, lr}
 8001732:	b092      	sub	sp, #72	; 0x48
 8001734:	af02      	add	r7, sp, #8

	TcpIp_SocketIdType curInd;
	for(curInd = 0; curInd < TcpIpTcpSocketMax; curInd++)
 8001736:	2300      	movs	r3, #0
 8001738:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800173a:	e315      	b.n	8001d68 <TcpIp_MainFunction+0x638>
	{
		if(FALSE == socket_list[curInd].used)
 800173c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800173e:	49cc      	ldr	r1, [pc, #816]	; (8001a70 <TcpIp_MainFunction+0x340>)
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	3318      	adds	r3, #24
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 8307 	beq.w	8001d62 <TcpIp_MainFunction+0x632>
				}
			}
#endif

			/* 3 way handshake Client */
			if(TCPIP_SOCKET_CONNECTED == socket_list[curInd].state){
 8001754:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001756:	49c6      	ldr	r1, [pc, #792]	; (8001a70 <TcpIp_MainFunction+0x340>)
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3319      	adds	r3, #25
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d12f      	bne.n	80017ca <TcpIp_MainFunction+0x9a>
				uint8* bufPtr;
				EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 800176a:	2300      	movs	r3, #0
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2300      	movs	r3, #0
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2000      	movs	r0, #0
 800177c:	f7fe fcf8 	bl	8000170 <EthIf_ProvideTxBuffer>
				TcpIp_GetPacket_Header(curInd, TCPIP_SYN_FLAG, 1, &bufPtr);
 8001780:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001784:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001786:	2201      	movs	r2, #1
 8001788:	2102      	movs	r1, #2
 800178a:	f7ff fd55 	bl	8001238 <TcpIp_GetPacket_Header>
				EthIf_Transmit(0, 0, 0, 0, 20, 0);
 800178e:	2300      	movs	r3, #0
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	2314      	movs	r3, #20
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2300      	movs	r3, #0
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2000      	movs	r0, #0
 800179e:	f7fe fd09 	bl	80001b4 <EthIf_Transmit>

				socket_list[curInd].state = TCPIP_SOCKET_SYN_SENT;
 80017a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80017a4:	49b2      	ldr	r1, [pc, #712]	; (8001a70 <TcpIp_MainFunction+0x340>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	440b      	add	r3, r1
 80017b0:	3319      	adds	r3, #25
 80017b2:	2202      	movs	r2, #2
 80017b4:	701a      	strb	r2, [r3, #0]

				socket_list[curInd].startRetransmissionTimeout = TRUE;
 80017b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80017b8:	49ad      	ldr	r1, [pc, #692]	; (8001a70 <TcpIp_MainFunction+0x340>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	332c      	adds	r3, #44	; 0x2c
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
			}

			/* 3 way handshake Client */
			if(TCPIP_SOCKET_SYN_ACK_REC == socket_list[curInd].state){
 80017ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80017cc:	49a8      	ldr	r1, [pc, #672]	; (8001a70 <TcpIp_MainFunction+0x340>)
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	3319      	adds	r3, #25
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d129      	bne.n	8001834 <TcpIp_MainFunction+0x104>
				uint8* bufPtr;
				EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 80017e0:	2300      	movs	r3, #0
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2300      	movs	r3, #0
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7fe fcbd 	bl	8000170 <EthIf_ProvideTxBuffer>
				TcpIp_GetPacket_Header(curInd, TCPIP_ACK_FLAG, 3, &bufPtr);
 80017f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017fa:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 80017fc:	2203      	movs	r2, #3
 80017fe:	2110      	movs	r1, #16
 8001800:	f7ff fd1a 	bl	8001238 <TcpIp_GetPacket_Header>
				EthIf_Transmit(0, 0, 0, 0, 20, 0);
 8001804:	2300      	movs	r3, #0
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2314      	movs	r3, #20
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2000      	movs	r0, #0
 8001814:	f7fe fcce 	bl	80001b4 <EthIf_Transmit>

				socket_list[curInd].state = TCPIP_SOCKET_ESTABLISHED;
 8001818:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800181a:	4995      	ldr	r1, [pc, #596]	; (8001a70 <TcpIp_MainFunction+0x340>)
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	3319      	adds	r3, #25
 8001828:	2207      	movs	r2, #7
 800182a:	701a      	strb	r2, [r3, #0]
				SoAd_TcpConnected (curInd);
 800182c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe8c 	bl	800054c <SoAd_TcpConnected>
			}

			/* 3 way handshake Server */
			if(TCPIP_SOCKET_SYN_REC == socket_list[curInd].state){
 8001834:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001836:	498e      	ldr	r1, [pc, #568]	; (8001a70 <TcpIp_MainFunction+0x340>)
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	3319      	adds	r3, #25
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b04      	cmp	r3, #4
 8001848:	d12f      	bne.n	80018aa <TcpIp_MainFunction+0x17a>
				uint8* bufPtr;
				EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 800184a:	2300      	movs	r3, #0
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2000      	movs	r0, #0
 800185c:	f7fe fc88 	bl	8000170 <EthIf_ProvideTxBuffer>
				TcpIp_GetPacket_Header(curInd, TCPIP_SYN_FLAG | TCPIP_ACK_FLAG, 2, &bufPtr);
 8001860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001864:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001866:	2202      	movs	r2, #2
 8001868:	2112      	movs	r1, #18
 800186a:	f7ff fce5 	bl	8001238 <TcpIp_GetPacket_Header>
				EthIf_Transmit(0, 0, 0, 0, 20, 0);
 800186e:	2300      	movs	r3, #0
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	2314      	movs	r3, #20
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2300      	movs	r3, #0
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2000      	movs	r0, #0
 800187e:	f7fe fc99 	bl	80001b4 <EthIf_Transmit>

				socket_list[curInd].state = TCPIP_SOCKET_SYN_ACK_SENT;
 8001882:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001884:	497a      	ldr	r1, [pc, #488]	; (8001a70 <TcpIp_MainFunction+0x340>)
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3319      	adds	r3, #25
 8001892:	2206      	movs	r2, #6
 8001894:	701a      	strb	r2, [r3, #0]

				socket_list[curInd].startRetransmissionTimeout = TRUE;
 8001896:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001898:	4975      	ldr	r1, [pc, #468]	; (8001a70 <TcpIp_MainFunction+0x340>)
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	332c      	adds	r3, #44	; 0x2c
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
			}

			/* Transmission */
			if(TCPIP_SOCKET_ESTABLISHED == socket_list[curInd].state){
 80018aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80018ac:	4970      	ldr	r1, [pc, #448]	; (8001a70 <TcpIp_MainFunction+0x340>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	3319      	adds	r3, #25
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b07      	cmp	r3, #7
 80018be:	d15f      	bne.n	8001980 <TcpIp_MainFunction+0x250>

				if(TcpIpBuffer[curInd].buffReady){
 80018c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018c2:	4a6c      	ldr	r2, [pc, #432]	; (8001a74 <TcpIp_MainFunction+0x344>)
 80018c4:	f44f 61bd 	mov.w	r1, #1512	; 0x5e8
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	f203 53e6 	addw	r3, r3, #1510	; 0x5e6
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d053      	beq.n	8001980 <TcpIp_MainFunction+0x250>
					//Get the ethif to allocate it's buffer
					uint8* ptr = (TcpIpBuffer[curInd].tcpData);
 80018d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018da:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	4a64      	ldr	r2, [pc, #400]	; (8001a74 <TcpIp_MainFunction+0x344>)
 80018e4:	4413      	add	r3, r2
 80018e6:	3301      	adds	r3, #1
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					TcpIp_GetPacket_Header(curInd, 0, 4/*Sequence number*/, &ptr);
 80018ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ee:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 80018f0:	2204      	movs	r2, #4
 80018f2:	2100      	movs	r1, #0
 80018f4:	f7ff fca0 	bl	8001238 <TcpIp_GetPacket_Header>
					uint8* bufPtr;
					EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 80018f8:	2300      	movs	r3, #0
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2300      	movs	r3, #0
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	2000      	movs	r0, #0
 800190a:	f7fe fc31 	bl	8000170 <EthIf_ProvideTxBuffer>
					TcpIp_EthIf_CopyToBuffer(&bufPtr, &ptr, TcpIpBuffer[curInd].bufferPtrIdx);
 800190e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001910:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <TcpIp_MainFunction+0x344>)
 8001912:	f44f 61bd 	mov.w	r1, #1512	; 0x5e8
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8001920:	881a      	ldrh	r2, [r3, #0]
 8001922:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fd6c 	bl	8001408 <TcpIp_EthIf_CopyToBuffer>
					EthIf_Transmit(0, 0, 0, 0, TcpIpBuffer[curInd].bufferPtrIdx, 0);
 8001930:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001932:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <TcpIp_MainFunction+0x344>)
 8001934:	f44f 61bd 	mov.w	r1, #1512	; 0x5e8
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2200      	movs	r2, #0
 8001946:	9201      	str	r2, [sp, #4]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2300      	movs	r3, #0
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2000      	movs	r0, #0
 8001952:	f7fe fc2f 	bl	80001b4 <EthIf_Transmit>
					TcpIpBuffer[curInd].bufferPtrIdx = 20; /*Return To initial Value After Packet is sent*/
 8001956:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001958:	4a46      	ldr	r2, [pc, #280]	; (8001a74 <TcpIp_MainFunction+0x344>)
 800195a:	f44f 61bd 	mov.w	r1, #1512	; 0x5e8
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	f203 53e4 	addw	r3, r3, #1508	; 0x5e4
 8001968:	2214      	movs	r2, #20
 800196a:	801a      	strh	r2, [r3, #0]
					socket_list[curInd].state = TCPIP_SOCKET_TRANSMIT_DONE;
 800196c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800196e:	4940      	ldr	r1, [pc, #256]	; (8001a70 <TcpIp_MainFunction+0x340>)
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	3319      	adds	r3, #25
 800197c:	2208      	movs	r2, #8
 800197e:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Sending ACK after Reception */
			if(TCPIP_SOCKET_RECPETION_SEND_ACK == socket_list[curInd].state){
 8001980:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001982:	493b      	ldr	r1, [pc, #236]	; (8001a70 <TcpIp_MainFunction+0x340>)
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	3319      	adds	r3, #25
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b0b      	cmp	r3, #11
 8001994:	d125      	bne.n	80019e2 <TcpIp_MainFunction+0x2b2>
				uint8* bufPtr;
				EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 8001996:	2300      	movs	r3, #0
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2300      	movs	r3, #0
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7fe fbe2 	bl	8000170 <EthIf_ProvideTxBuffer>
				TcpIp_GetPacket_Header(curInd, TCPIP_ACK_FLAG, 3, &bufPtr);
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 80019b2:	2203      	movs	r2, #3
 80019b4:	2110      	movs	r1, #16
 80019b6:	f7ff fc3f 	bl	8001238 <TcpIp_GetPacket_Header>
				EthIf_Transmit(0, 0, 0, 0, 20, 0);
 80019ba:	2300      	movs	r3, #0
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	2314      	movs	r3, #20
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2300      	movs	r3, #0
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7fe fbf3 	bl	80001b4 <EthIf_Transmit>

				socket_list[curInd].state = TCPIP_SOCKET_ESTABLISHED;				
 80019ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80019d0:	4927      	ldr	r1, [pc, #156]	; (8001a70 <TcpIp_MainFunction+0x340>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3319      	adds	r3, #25
 80019de:	2207      	movs	r2, #7
 80019e0:	701a      	strb	r2, [r3, #0]
			}

			/* Termination (Requester) */
			if(TCPIP_SOCKET_ABORT == socket_list[curInd].state){
 80019e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80019e4:	4922      	ldr	r1, [pc, #136]	; (8001a70 <TcpIp_MainFunction+0x340>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	3319      	adds	r3, #25
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d12f      	bne.n	8001a58 <TcpIp_MainFunction+0x328>
				uint8* bufPtr;
				EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 80019f8:	2300      	movs	r3, #0
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7fe fbb1 	bl	8000170 <EthIf_ProvideTxBuffer>
				TcpIp_GetPacket_Header(curInd, TCPIP_RST_FLAG, 2, &bufPtr);
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001a14:	2202      	movs	r2, #2
 8001a16:	2104      	movs	r1, #4
 8001a18:	f7ff fc0e 	bl	8001238 <TcpIp_GetPacket_Header>
				EthIf_Transmit(0, 0, 0, 0, 20, 0);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	2314      	movs	r3, #20
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7fe fbc2 	bl	80001b4 <EthIf_Transmit>

				socket_list[curInd].state = TCPIP_SOCKET_CLOSED;
 8001a30:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001a32:	490f      	ldr	r1, [pc, #60]	; (8001a70 <TcpIp_MainFunction+0x340>)
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3319      	adds	r3, #25
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
				socket_list[curInd].used = FALSE;  				
 8001a44:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001a46:	490a      	ldr	r1, [pc, #40]	; (8001a70 <TcpIp_MainFunction+0x340>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	3318      	adds	r3, #24
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
			}

			/* Termination (Requester) */
			if(TCPIP_SOCKET_TERMINATE == socket_list[curInd].state){
 8001a58:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001a5a:	4905      	ldr	r1, [pc, #20]	; (8001a70 <TcpIp_MainFunction+0x340>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	3319      	adds	r3, #25
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b0d      	cmp	r3, #13
 8001a6c:	d134      	bne.n	8001ad8 <TcpIp_MainFunction+0x3a8>
 8001a6e:	e003      	b.n	8001a78 <TcpIp_MainFunction+0x348>
 8001a70:	20000cb4 	.word	0x20000cb4
 8001a74:	200000e4 	.word	0x200000e4
				uint8* bufPtr;
				EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7fe fb71 	bl	8000170 <EthIf_ProvideTxBuffer>
				TcpIp_GetPacket_Header(curInd, TCPIP_FIN_FLAG, 2, &bufPtr);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001a94:	2202      	movs	r2, #2
 8001a96:	2101      	movs	r1, #1
 8001a98:	f7ff fbce 	bl	8001238 <TcpIp_GetPacket_Header>
				EthIf_Transmit(0, 0, 0, 0, 20, 0);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2314      	movs	r3, #20
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7fe fb82 	bl	80001b4 <EthIf_Transmit>

				socket_list[curInd].state = TCPIP_SOCKET_FIN_WAIT_1;
 8001ab0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001ab2:	49b1      	ldr	r1, [pc, #708]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	3319      	adds	r3, #25
 8001ac0:	220e      	movs	r2, #14
 8001ac2:	701a      	strb	r2, [r3, #0]

				socket_list[curInd].startRetransmissionTimeout = TRUE;		
 8001ac4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001ac6:	49ac      	ldr	r1, [pc, #688]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	332c      	adds	r3, #44	; 0x2c
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
			}

			/* Termination (Requester) */
			if(TCPIP_SOCKET_FINAL_ACK == socket_list[curInd].state){
 8001ad8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001ada:	49a7      	ldr	r1, [pc, #668]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3319      	adds	r3, #25
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d12f      	bne.n	8001b4e <TcpIp_MainFunction+0x41e>
				uint8* bufPtr;
				EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 8001aee:	2300      	movs	r3, #0
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	f107 0318 	add.w	r3, r7, #24
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2300      	movs	r3, #0
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7fe fb36 	bl	8000170 <EthIf_ProvideTxBuffer>
				TcpIp_GetPacket_Header(curInd, TCPIP_ACK_FLAG, 2, &bufPtr);
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	f7ff fb93 	bl	8001238 <TcpIp_GetPacket_Header>
				EthIf_Transmit(0, 0, 0, 0, 20, 0);
 8001b12:	2300      	movs	r3, #0
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	2314      	movs	r3, #20
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7fe fb47 	bl	80001b4 <EthIf_Transmit>

				socket_list[curInd].state = TCPIP_SOCKET_CLOSED;
 8001b26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001b28:	4993      	ldr	r1, [pc, #588]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	3319      	adds	r3, #25
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
				socket_list[curInd].used = FALSE;					
 8001b3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001b3c:	498e      	ldr	r1, [pc, #568]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	440b      	add	r3, r1
 8001b48:	3318      	adds	r3, #24
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
			}

			/* Termination (Responser) */
			if(TCPIP_SOCKET_CLOSE_WAIT == socket_list[curInd].state){
 8001b4e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001b50:	4989      	ldr	r1, [pc, #548]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3319      	adds	r3, #25
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b11      	cmp	r3, #17
 8001b62:	d141      	bne.n	8001be8 <TcpIp_MainFunction+0x4b8>
				uint8* ackBufPtr;
				uint8* finBufPtr;
				EthIf_ProvideTxBuffer(0, 0, 0, 0, &ackBufPtr, NULL_ptr);
 8001b64:	2300      	movs	r3, #0
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7fe fafb 	bl	8000170 <EthIf_ProvideTxBuffer>
				TcpIp_GetPacket_Header(curInd, TCPIP_ACK_FLAG, 2, &ackBufPtr);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001b80:	2202      	movs	r2, #2
 8001b82:	2110      	movs	r1, #16
 8001b84:	f7ff fb58 	bl	8001238 <TcpIp_GetPacket_Header>
				EthIf_Transmit(0, 0, 0, 0, 20, 0);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	2314      	movs	r3, #20
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7fe fb0c 	bl	80001b4 <EthIf_Transmit>

				EthIf_ProvideTxBuffer(0, 0, 0, 0, &finBufPtr, NULL_ptr);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7fe fadf 	bl	8000170 <EthIf_ProvideTxBuffer>
				TcpIp_GetPacket_Header(curInd, TCPIP_FIN_FLAG, 2, &finBufPtr);
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001bb8:	2202      	movs	r2, #2
 8001bba:	2101      	movs	r1, #1
 8001bbc:	f7ff fb3c 	bl	8001238 <TcpIp_GetPacket_Header>
				EthIf_Transmit(0, 0, 0, 0, 20, 0);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2314      	movs	r3, #20
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7fe faf0 	bl	80001b4 <EthIf_Transmit>

				socket_list[curInd].state = TCPIP_SOCKET_FINAL_ACK_WAIT;				
 8001bd4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001bd6:	4968      	ldr	r1, [pc, #416]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3319      	adds	r3, #25
 8001be4:	2212      	movs	r2, #18
 8001be6:	701a      	strb	r2, [r3, #0]
			}

			/* Retransmission */
			if(TRUE == socket_list[curInd].retransmit)
 8001be8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001bea:	4963      	ldr	r1, [pc, #396]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3334      	adds	r3, #52	; 0x34
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	f040 80b1 	bne.w	8001d62 <TcpIp_MainFunction+0x632>
			{
				/* Retransmit SYN */
				if(TCPIP_SOCKET_SYN_SENT == socket_list[curInd].state)
 8001c00:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001c02:	495d      	ldr	r1, [pc, #372]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3319      	adds	r3, #25
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d130      	bne.n	8001c78 <TcpIp_MainFunction+0x548>
				{
					uint8* bufPtr;
					EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 8001c16:	2300      	movs	r3, #0
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2300      	movs	r3, #0
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7fe faa2 	bl	8000170 <EthIf_ProvideTxBuffer>
					TcpIp_GetPacket_Header(curInd, TCPIP_SYN_FLAG, 1, &bufPtr);
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001c32:	2201      	movs	r2, #1
 8001c34:	2102      	movs	r1, #2
 8001c36:	f7ff faff 	bl	8001238 <TcpIp_GetPacket_Header>
					EthIf_Transmit(0, 0, 0, 0, 20, 0);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	2314      	movs	r3, #20
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2300      	movs	r3, #0
 8001c44:	2200      	movs	r2, #0
 8001c46:	2100      	movs	r1, #0
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7fe fab3 	bl	80001b4 <EthIf_Transmit>

					socket_list[curInd].retransmissionCntr = 0;	
 8001c4e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001c50:	4949      	ldr	r1, [pc, #292]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	3330      	adds	r3, #48	; 0x30
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
					socket_list[curInd].retransmit = FALSE;				
 8001c62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001c64:	4944      	ldr	r1, [pc, #272]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	3334      	adds	r3, #52	; 0x34
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	e074      	b.n	8001d62 <TcpIp_MainFunction+0x632>
				}
				/* Retransmit SYN ACK */
				else if(TCPIP_SOCKET_SYN_ACK_SENT == socket_list[curInd].state)
 8001c78:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001c7a:	493f      	ldr	r1, [pc, #252]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	3319      	adds	r3, #25
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d130      	bne.n	8001cf0 <TcpIp_MainFunction+0x5c0>
				{
					uint8* bufPtr;
					EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7fe fa66 	bl	8000170 <EthIf_ProvideTxBuffer>
					TcpIp_GetPacket_Header(curInd, TCPIP_SYN_FLAG | TCPIP_ACK_FLAG, 2, &bufPtr);
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001caa:	2202      	movs	r2, #2
 8001cac:	2112      	movs	r1, #18
 8001cae:	f7ff fac3 	bl	8001238 <TcpIp_GetPacket_Header>
					EthIf_Transmit(0, 0, 0, 0, 20, 0);		
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	2314      	movs	r3, #20
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7fe fa77 	bl	80001b4 <EthIf_Transmit>

					socket_list[curInd].retransmissionCntr = 0;	
 8001cc6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001cc8:	492b      	ldr	r1, [pc, #172]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3330      	adds	r3, #48	; 0x30
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
					socket_list[curInd].retransmit = FALSE;				
 8001cda:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001cdc:	4926      	ldr	r1, [pc, #152]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3334      	adds	r3, #52	; 0x34
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e038      	b.n	8001d62 <TcpIp_MainFunction+0x632>
				}
				/* Retransmit FIN */
				else if(TCPIP_SOCKET_FIN_WAIT_1 == socket_list[curInd].state)
 8001cf0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001cf2:	4921      	ldr	r1, [pc, #132]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3319      	adds	r3, #25
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b0e      	cmp	r3, #14
 8001d04:	d12d      	bne.n	8001d62 <TcpIp_MainFunction+0x632>
				{
					uint8* bufPtr;
					EthIf_ProvideTxBuffer(0, 0, 0, 0, &bufPtr, NULL_ptr);
 8001d06:	2300      	movs	r3, #0
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7fe fa2b 	bl	8000170 <EthIf_ProvideTxBuffer>
					TcpIp_GetPacket_Header(curInd, TCPIP_FIN_FLAG, 2, &bufPtr);
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 8001d1e:	2202      	movs	r2, #2
 8001d20:	2101      	movs	r1, #1
 8001d22:	f7ff fa89 	bl	8001238 <TcpIp_GetPacket_Header>
					EthIf_Transmit(0, 0, 0, 0, 20, 0);	
 8001d26:	2300      	movs	r3, #0
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	2314      	movs	r3, #20
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7fe fa3d 	bl	80001b4 <EthIf_Transmit>

					socket_list[curInd].retransmissionCntr = 0;	
 8001d3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	3330      	adds	r3, #48	; 0x30
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
					socket_list[curInd].retransmit = FALSE;						
 8001d4e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001d50:	4909      	ldr	r1, [pc, #36]	; (8001d78 <TcpIp_MainFunction+0x648>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3334      	adds	r3, #52	; 0x34
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
	for(curInd = 0; curInd < TcpIpTcpSocketMax; curInd++)
 8001d62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d64:	3301      	adds	r3, #1
 8001d66:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001d68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f67f ace6 	bls.w	800173c <TcpIp_MainFunction+0xc>
				}
			}
		}
	}
}
 8001d70:	bf00      	nop
 8001d72:	3740      	adds	r7, #64	; 0x40
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000cb4 	.word	0x20000cb4

08001d7c <TcpIp_RxIndication>:

void TcpIp_RxIndication (uint8 CtrlIdx, Eth_FrameType FrameType, 
	boolean IsBroadcast, const uint8* PhysAddrPtr, const uint8* DataPtr, uint16 LenByte){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	71bb      	strb	r3, [r7, #6]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	717b      	strb	r3, [r7, #5]

	TcpIp_SocketIdType curInd;

	for(curInd = 0; curInd < TcpIpTcpSocketMax; curInd++){
 8001d90:	2300      	movs	r3, #0
 8001d92:	81fb      	strh	r3, [r7, #14]
 8001d94:	e27a      	b.n	800228c <TcpIp_RxIndication+0x510>
		if(FALSE == socket_list[curInd].used){
 8001d96:	89fa      	ldrh	r2, [r7, #14]
 8001d98:	49ac      	ldr	r1, [pc, #688]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	3318      	adds	r3, #24
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 826c 	beq.w	8002286 <TcpIp_RxIndication+0x50a>

		}
		else{
			/* 3 way Handshake Client */
			if(TCPIP_SOCKET_SYN_SENT == socket_list[curInd].state){
 8001dae:	89fa      	ldrh	r2, [r7, #14]
 8001db0:	49a6      	ldr	r1, [pc, #664]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	3319      	adds	r3, #25
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d156      	bne.n	8001e72 <TcpIp_RxIndication+0xf6>
				if(E_OK == TcpIp_DecodePacket(curInd, DataPtr)){
 8001dc4:	89fb      	ldrh	r3, [r7, #14]
 8001dc6:	69b9      	ldr	r1, [r7, #24]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff faad 	bl	8001328 <TcpIp_DecodePacket>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	f040 8214 	bne.w	80021fe <TcpIp_RxIndication+0x482>

					if((socket_list[curInd].curFlags & TCPIP_SYN_FLAG) && (socket_list[curInd].curFlags & TCPIP_ACK_FLAG)){
 8001dd6:	89fa      	ldrh	r2, [r7, #14]
 8001dd8:	499c      	ldr	r1, [pc, #624]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	3324      	adds	r3, #36	; 0x24
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d035      	beq.n	8001e5c <TcpIp_RxIndication+0xe0>
 8001df0:	89fa      	ldrh	r2, [r7, #14]
 8001df2:	4996      	ldr	r1, [pc, #600]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3324      	adds	r3, #36	; 0x24
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d028      	beq.n	8001e5c <TcpIp_RxIndication+0xe0>
						socket_list[curInd].state = TCPIP_SOCKET_SYN_ACK_REC;
 8001e0a:	89fa      	ldrh	r2, [r7, #14]
 8001e0c:	498f      	ldr	r1, [pc, #572]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	3319      	adds	r3, #25
 8001e1a:	2205      	movs	r2, #5
 8001e1c:	701a      	strb	r2, [r3, #0]

						socket_list[curInd].startRetransmissionTimeout = FALSE;
 8001e1e:	89fa      	ldrh	r2, [r7, #14]
 8001e20:	498a      	ldr	r1, [pc, #552]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	332c      	adds	r3, #44	; 0x2c
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
						socket_list[curInd].retransmissionCntr = 0;
 8001e32:	89fa      	ldrh	r2, [r7, #14]
 8001e34:	4985      	ldr	r1, [pc, #532]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	3330      	adds	r3, #48	; 0x30
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
						socket_list[curInd].retransmit = FALSE;
 8001e46:	89fa      	ldrh	r2, [r7, #14]
 8001e48:	4980      	ldr	r1, [pc, #512]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3334      	adds	r3, #52	; 0x34
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e1d0      	b.n	80021fe <TcpIp_RxIndication+0x482>
					}
					else{
						socket_list[curInd].state = TCPIP_SOCKET_UNEXPECTED;
 8001e5c:	89fa      	ldrh	r2, [r7, #14]
 8001e5e:	497b      	ldr	r1, [pc, #492]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3319      	adds	r3, #25
 8001e6c:	2213      	movs	r2, #19
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	e1c5      	b.n	80021fe <TcpIp_RxIndication+0x482>
							
				}
			}

			/* 3 way Handshake Server */
			else if(TCPIP_SOCKET_LISTEN == socket_list[curInd].state){
 8001e72:	89fa      	ldrh	r2, [r7, #14]
 8001e74:	4975      	ldr	r1, [pc, #468]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	3319      	adds	r3, #25
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d12b      	bne.n	8001ee0 <TcpIp_RxIndication+0x164>
				if(E_OK == TcpIp_DecodePacket(curInd, DataPtr)){
 8001e88:	89fb      	ldrh	r3, [r7, #14]
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fa4b 	bl	8001328 <TcpIp_DecodePacket>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	f040 81b2 	bne.w	80021fe <TcpIp_RxIndication+0x482>

					if(socket_list[curInd].curFlags & TCPIP_SYN_FLAG){
 8001e9a:	89fa      	ldrh	r2, [r7, #14]
 8001e9c:	496b      	ldr	r1, [pc, #428]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3324      	adds	r3, #36	; 0x24
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <TcpIp_RxIndication+0x14e>
						socket_list[curInd].state = TCPIP_SOCKET_SYN_REC;
 8001eb4:	89fa      	ldrh	r2, [r7, #14]
 8001eb6:	4965      	ldr	r1, [pc, #404]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3319      	adds	r3, #25
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e199      	b.n	80021fe <TcpIp_RxIndication+0x482>
					}
					else{
						socket_list[curInd].state = TCPIP_SOCKET_UNEXPECTED;
 8001eca:	89fa      	ldrh	r2, [r7, #14]
 8001ecc:	495f      	ldr	r1, [pc, #380]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3319      	adds	r3, #25
 8001eda:	2213      	movs	r2, #19
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e18e      	b.n	80021fe <TcpIp_RxIndication+0x482>
					}
				}
			}

			/* 3 way Handshake Server */
			else if(TCPIP_SOCKET_SYN_ACK_SENT == socket_list[curInd].state){
 8001ee0:	89fa      	ldrh	r2, [r7, #14]
 8001ee2:	495a      	ldr	r1, [pc, #360]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	3319      	adds	r3, #25
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d156      	bne.n	8001fa4 <TcpIp_RxIndication+0x228>
				if(E_OK == TcpIp_DecodePacket(curInd, DataPtr)){
 8001ef6:	89fb      	ldrh	r3, [r7, #14]
 8001ef8:	69b9      	ldr	r1, [r7, #24]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fa14 	bl	8001328 <TcpIp_DecodePacket>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	f040 817b 	bne.w	80021fe <TcpIp_RxIndication+0x482>

					if(socket_list[curInd].curFlags & TCPIP_ACK_FLAG){
 8001f08:	89fa      	ldrh	r2, [r7, #14]
 8001f0a:	4950      	ldr	r1, [pc, #320]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	3324      	adds	r3, #36	; 0x24
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d035      	beq.n	8001f8e <TcpIp_RxIndication+0x212>
						socket_list[curInd].state = TCPIP_SOCKET_ESTABLISHED;
 8001f22:	89fa      	ldrh	r2, [r7, #14]
 8001f24:	4949      	ldr	r1, [pc, #292]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	3319      	adds	r3, #25
 8001f32:	2207      	movs	r2, #7
 8001f34:	701a      	strb	r2, [r3, #0]

						socket_list[curInd].startRetransmissionTimeout = FALSE;
 8001f36:	89fa      	ldrh	r2, [r7, #14]
 8001f38:	4944      	ldr	r1, [pc, #272]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	332c      	adds	r3, #44	; 0x2c
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
						socket_list[curInd].retransmissionCntr = 0;
 8001f4a:	89fa      	ldrh	r2, [r7, #14]
 8001f4c:	493f      	ldr	r1, [pc, #252]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	3330      	adds	r3, #48	; 0x30
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
						socket_list[curInd].retransmit = FALSE;
 8001f5e:	89fa      	ldrh	r2, [r7, #14]
 8001f60:	493a      	ldr	r1, [pc, #232]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3334      	adds	r3, #52	; 0x34
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]

						SoAd_TcpAccepted(curInd, curInd, (TcpIp_SockAddrType*)&socket_list[curInd].remoteIpV4Address);
 8001f72:	89fa      	ldrh	r2, [r7, #14]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	3310      	adds	r3, #16
 8001f7e:	4a33      	ldr	r2, [pc, #204]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001f80:	441a      	add	r2, r3
 8001f82:	89f9      	ldrh	r1, [r7, #14]
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe faa0 	bl	80004cc <SoAd_TcpAccepted>
 8001f8c:	e137      	b.n	80021fe <TcpIp_RxIndication+0x482>
					}
					else{
						socket_list[curInd].state = TCPIP_SOCKET_UNEXPECTED;
 8001f8e:	89fa      	ldrh	r2, [r7, #14]
 8001f90:	492e      	ldr	r1, [pc, #184]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3319      	adds	r3, #25
 8001f9e:	2213      	movs	r2, #19
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	e12c      	b.n	80021fe <TcpIp_RxIndication+0x482>

				}
			}

			/* Transmission done with ACK */
			else if(TCPIP_SOCKET_TRANSMIT_DONE == socket_list[curInd].state){
 8001fa4:	89fa      	ldrh	r2, [r7, #14]
 8001fa6:	4929      	ldr	r1, [pc, #164]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3319      	adds	r3, #25
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d12d      	bne.n	8002016 <TcpIp_RxIndication+0x29a>
				if(E_OK == TcpIp_DecodePacket(curInd, DataPtr)){
 8001fba:	89fb      	ldrh	r3, [r7, #14]
 8001fbc:	69b9      	ldr	r1, [r7, #24]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f9b2 	bl	8001328 <TcpIp_DecodePacket>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	f040 8119 	bne.w	80021fe <TcpIp_RxIndication+0x482>
					socket_list[curInd].state = TCPIP_SOCKET_TRANSMIT_ACK_REC;
 8001fcc:	89fa      	ldrh	r2, [r7, #14]
 8001fce:	491f      	ldr	r1, [pc, #124]	; (800204c <TcpIp_RxIndication+0x2d0>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3319      	adds	r3, #25
 8001fdc:	220a      	movs	r2, #10
 8001fde:	701a      	strb	r2, [r3, #0]
					TcpIpBuffer[curInd].acquired = FALSE;
 8001fe0:	89fb      	ldrh	r3, [r7, #14]
 8001fe2:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <TcpIp_RxIndication+0x2d4>)
 8001fe4:	f44f 61bd 	mov.w	r1, #1512	; 0x5e8
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
					TcpIpBuffer[curInd].buffReady = FALSE;
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	4a16      	ldr	r2, [pc, #88]	; (8002050 <TcpIp_RxIndication+0x2d4>)
 8001ff6:	f44f 61bd 	mov.w	r1, #1512	; 0x5e8
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	f203 53e6 	addw	r3, r3, #1510	; 0x5e6
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
					SoAd_TxConfirmation(curInd, LenByte);
 8002008:	8bba      	ldrh	r2, [r7, #28]
 800200a:	89fb      	ldrh	r3, [r7, #14]
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fad8 	bl	80005c4 <SoAd_TxConfirmation>
 8002014:	e0f3      	b.n	80021fe <TcpIp_RxIndication+0x482>
				}
			}

			/* Reception */
			else if(TCPIP_SOCKET_ESTABLISHED == socket_list[curInd].state)
 8002016:	89fa      	ldrh	r2, [r7, #14]
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <TcpIp_RxIndication+0x2d0>)
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	3319      	adds	r3, #25
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b07      	cmp	r3, #7
 800202a:	d113      	bne.n	8002054 <TcpIp_RxIndication+0x2d8>
			{
				TcpIp_SockAddrType* genericAddress = (TcpIp_SockAddrType*)&(socket_list[curInd].remoteIpV4Address);
 800202c:	89fa      	ldrh	r2, [r7, #14]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	3310      	adds	r3, #16
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <TcpIp_RxIndication+0x2d0>)
 800203a:	4413      	add	r3, r2
 800203c:	60bb      	str	r3, [r7, #8]
				SoAd_RxIndication(curInd, genericAddress, DataPtr, LenByte);
 800203e:	8bbb      	ldrh	r3, [r7, #28]
 8002040:	89f8      	ldrh	r0, [r7, #14]
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	f7fe fb4d 	bl	80006e4 <SoAd_RxIndication>
 800204a:	e0d8      	b.n	80021fe <TcpIp_RxIndication+0x482>
 800204c:	20000cb4 	.word	0x20000cb4
 8002050:	200000e4 	.word	0x200000e4
			}

			/* Termination (Requester) */
			else if(TCPIP_SOCKET_FIN_WAIT_1 == socket_list[curInd].state){
 8002054:	89fa      	ldrh	r2, [r7, #14]
 8002056:	4991      	ldr	r1, [pc, #580]	; (800229c <TcpIp_RxIndication+0x520>)
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	3319      	adds	r3, #25
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b0e      	cmp	r3, #14
 8002068:	d149      	bne.n	80020fe <TcpIp_RxIndication+0x382>
				if(E_OK == TcpIp_DecodePacket(curInd, DataPtr)){
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	69b9      	ldr	r1, [r7, #24]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f95a 	bl	8001328 <TcpIp_DecodePacket>
 8002074:	4603      	mov	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	f040 80c1 	bne.w	80021fe <TcpIp_RxIndication+0x482>

					if(socket_list[curInd].curFlags & TCPIP_ACK_FLAG){
 800207c:	89fa      	ldrh	r2, [r7, #14]
 800207e:	4987      	ldr	r1, [pc, #540]	; (800229c <TcpIp_RxIndication+0x520>)
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3324      	adds	r3, #36	; 0x24
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d028      	beq.n	80020e8 <TcpIp_RxIndication+0x36c>
						socket_list[curInd].state = TCPIP_SOCKET_FIN_WAIT_2;
 8002096:	89fa      	ldrh	r2, [r7, #14]
 8002098:	4980      	ldr	r1, [pc, #512]	; (800229c <TcpIp_RxIndication+0x520>)
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	3319      	adds	r3, #25
 80020a6:	220f      	movs	r2, #15
 80020a8:	701a      	strb	r2, [r3, #0]

						socket_list[curInd].startRetransmissionTimeout = FALSE;
 80020aa:	89fa      	ldrh	r2, [r7, #14]
 80020ac:	497b      	ldr	r1, [pc, #492]	; (800229c <TcpIp_RxIndication+0x520>)
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	332c      	adds	r3, #44	; 0x2c
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
						socket_list[curInd].retransmissionCntr = 0;
 80020be:	89fa      	ldrh	r2, [r7, #14]
 80020c0:	4976      	ldr	r1, [pc, #472]	; (800229c <TcpIp_RxIndication+0x520>)
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	3330      	adds	r3, #48	; 0x30
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
						socket_list[curInd].retransmit = FALSE;
 80020d2:	89fa      	ldrh	r2, [r7, #14]
 80020d4:	4971      	ldr	r1, [pc, #452]	; (800229c <TcpIp_RxIndication+0x520>)
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	3334      	adds	r3, #52	; 0x34
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e08a      	b.n	80021fe <TcpIp_RxIndication+0x482>
					}
					else{
						socket_list[curInd].state = TCPIP_SOCKET_UNEXPECTED;
 80020e8:	89fa      	ldrh	r2, [r7, #14]
 80020ea:	496c      	ldr	r1, [pc, #432]	; (800229c <TcpIp_RxIndication+0x520>)
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3319      	adds	r3, #25
 80020f8:	2213      	movs	r2, #19
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e07f      	b.n	80021fe <TcpIp_RxIndication+0x482>
								
				}				
			}

			/* Termination (Requester) */
			else if(TCPIP_SOCKET_FIN_WAIT_2 == socket_list[curInd].state){
 80020fe:	89fa      	ldrh	r2, [r7, #14]
 8002100:	4966      	ldr	r1, [pc, #408]	; (800229c <TcpIp_RxIndication+0x520>)
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3319      	adds	r3, #25
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d12a      	bne.n	800216a <TcpIp_RxIndication+0x3ee>
				if(E_OK == TcpIp_DecodePacket(curInd, DataPtr)){
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f905 	bl	8001328 <TcpIp_DecodePacket>
 800211e:	4603      	mov	r3, r0
 8002120:	2b01      	cmp	r3, #1
 8002122:	d16c      	bne.n	80021fe <TcpIp_RxIndication+0x482>

					if(socket_list[curInd].curFlags & TCPIP_FIN_FLAG){
 8002124:	89fa      	ldrh	r2, [r7, #14]
 8002126:	495d      	ldr	r1, [pc, #372]	; (800229c <TcpIp_RxIndication+0x520>)
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	3324      	adds	r3, #36	; 0x24
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <TcpIp_RxIndication+0x3d8>
						socket_list[curInd].state = TCPIP_SOCKET_FINAL_ACK;
 800213e:	89fa      	ldrh	r2, [r7, #14]
 8002140:	4956      	ldr	r1, [pc, #344]	; (800229c <TcpIp_RxIndication+0x520>)
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	3319      	adds	r3, #25
 800214e:	2210      	movs	r2, #16
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e054      	b.n	80021fe <TcpIp_RxIndication+0x482>
					}
					else{
						socket_list[curInd].state = TCPIP_SOCKET_UNEXPECTED;
 8002154:	89fa      	ldrh	r2, [r7, #14]
 8002156:	4951      	ldr	r1, [pc, #324]	; (800229c <TcpIp_RxIndication+0x520>)
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	3319      	adds	r3, #25
 8002164:	2213      	movs	r2, #19
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e049      	b.n	80021fe <TcpIp_RxIndication+0x482>
					
				}					
			}

			/* Termination (Responser) */
			else if(TCPIP_SOCKET_FINAL_ACK_WAIT == socket_list[curInd].state){
 800216a:	89fa      	ldrh	r2, [r7, #14]
 800216c:	494b      	ldr	r1, [pc, #300]	; (800229c <TcpIp_RxIndication+0x520>)
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	3319      	adds	r3, #25
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b12      	cmp	r3, #18
 800217e:	d134      	bne.n	80021ea <TcpIp_RxIndication+0x46e>
				if(E_OK == TcpIp_DecodePacket(curInd, DataPtr)){
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff f8cf 	bl	8001328 <TcpIp_DecodePacket>
 800218a:	4603      	mov	r3, r0
 800218c:	2b01      	cmp	r3, #1
 800218e:	d136      	bne.n	80021fe <TcpIp_RxIndication+0x482>

					if(socket_list[curInd].curFlags & TCPIP_ACK_FLAG){
 8002190:	89fa      	ldrh	r2, [r7, #14]
 8002192:	4942      	ldr	r1, [pc, #264]	; (800229c <TcpIp_RxIndication+0x520>)
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3324      	adds	r3, #36	; 0x24
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d014      	beq.n	80021d4 <TcpIp_RxIndication+0x458>
						socket_list[curInd].state = TCPIP_SOCKET_CLOSED;
 80021aa:	89fa      	ldrh	r2, [r7, #14]
 80021ac:	493b      	ldr	r1, [pc, #236]	; (800229c <TcpIp_RxIndication+0x520>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	3319      	adds	r3, #25
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
						socket_list[curInd].used = FALSE;
 80021be:	89fa      	ldrh	r2, [r7, #14]
 80021c0:	4936      	ldr	r1, [pc, #216]	; (800229c <TcpIp_RxIndication+0x520>)
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	3318      	adds	r3, #24
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	e014      	b.n	80021fe <TcpIp_RxIndication+0x482>
					}
					else{
						socket_list[curInd].state = TCPIP_SOCKET_UNEXPECTED;
 80021d4:	89fa      	ldrh	r2, [r7, #14]
 80021d6:	4931      	ldr	r1, [pc, #196]	; (800229c <TcpIp_RxIndication+0x520>)
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	3319      	adds	r3, #25
 80021e4:	2213      	movs	r2, #19
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e009      	b.n	80021fe <TcpIp_RxIndication+0x482>
					}
					
				}					
			}
			else{
				socket_list[curInd].state = TCPIP_SOCKET_UNEXPECTED;
 80021ea:	89fa      	ldrh	r2, [r7, #14]
 80021ec:	492b      	ldr	r1, [pc, #172]	; (800229c <TcpIp_RxIndication+0x520>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	3319      	adds	r3, #25
 80021fa:	2213      	movs	r2, #19
 80021fc:	701a      	strb	r2, [r3, #0]
			}

			/* Received Unexpected */
			if(socket_list[curInd].state == TCPIP_SOCKET_UNEXPECTED)
 80021fe:	89fa      	ldrh	r2, [r7, #14]
 8002200:	4926      	ldr	r1, [pc, #152]	; (800229c <TcpIp_RxIndication+0x520>)
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	3319      	adds	r3, #25
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b13      	cmp	r3, #19
 8002212:	d138      	bne.n	8002286 <TcpIp_RxIndication+0x50a>
			{
				/* Received FIN for termination handshake */
				if(socket_list[curInd].curFlags & TCPIP_FIN_FLAG){
 8002214:	89fa      	ldrh	r2, [r7, #14]
 8002216:	4921      	ldr	r1, [pc, #132]	; (800229c <TcpIp_RxIndication+0x520>)
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	3324      	adds	r3, #36	; 0x24
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <TcpIp_RxIndication+0x4c8>

					socket_list[curInd].state = TCPIP_SOCKET_CLOSE_WAIT;
 800222e:	89fa      	ldrh	r2, [r7, #14]
 8002230:	491a      	ldr	r1, [pc, #104]	; (800229c <TcpIp_RxIndication+0x520>)
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	3319      	adds	r3, #25
 800223e:	2211      	movs	r2, #17
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e020      	b.n	8002286 <TcpIp_RxIndication+0x50a>

				}
				/* Received RST for immediate termination */
				else if(socket_list[curInd].curFlags & TCPIP_RST_FLAG){
 8002244:	89fa      	ldrh	r2, [r7, #14]
 8002246:	4915      	ldr	r1, [pc, #84]	; (800229c <TcpIp_RxIndication+0x520>)
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3324      	adds	r3, #36	; 0x24
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d013      	beq.n	8002286 <TcpIp_RxIndication+0x50a>

					socket_list[curInd].state = TCPIP_SOCKET_CLOSED;
 800225e:	89fa      	ldrh	r2, [r7, #14]
 8002260:	490e      	ldr	r1, [pc, #56]	; (800229c <TcpIp_RxIndication+0x520>)
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3319      	adds	r3, #25
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
					socket_list[curInd].used = FALSE;
 8002272:	89fa      	ldrh	r2, [r7, #14]
 8002274:	4909      	ldr	r1, [pc, #36]	; (800229c <TcpIp_RxIndication+0x520>)
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	3318      	adds	r3, #24
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
	for(curInd = 0; curInd < TcpIpTcpSocketMax; curInd++){
 8002286:	89fb      	ldrh	r3, [r7, #14]
 8002288:	3301      	adds	r3, #1
 800228a:	81fb      	strh	r3, [r7, #14]
 800228c:	89fb      	ldrh	r3, [r7, #14]
 800228e:	2b01      	cmp	r3, #1
 8002290:	f67f ad81 	bls.w	8001d96 <TcpIp_RxIndication+0x1a>
			else{

			}
		}
	}	
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000cb4 	.word	0x20000cb4

080022a0 <TcpIp_TcpReceived>:

Std_ReturnType TcpIp_TcpReceived (TcpIp_SocketIdType SocketId, uint32 Length){
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	80fb      	strh	r3, [r7, #6]
	socket_list[SocketId].state = TCPIP_SOCKET_RECPETION_SEND_ACK;
 80022ac:	88fa      	ldrh	r2, [r7, #6]
 80022ae:	4907      	ldr	r1, [pc, #28]	; (80022cc <TcpIp_TcpReceived+0x2c>)
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3319      	adds	r3, #25
 80022bc:	220b      	movs	r2, #11
 80022be:	701a      	strb	r2, [r3, #0]
}
 80022c0:	bf00      	nop
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000cb4 	.word	0x20000cb4

080022d0 <calloc>:
 80022d0:	4b02      	ldr	r3, [pc, #8]	; (80022dc <calloc+0xc>)
 80022d2:	460a      	mov	r2, r1
 80022d4:	4601      	mov	r1, r0
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	f000 b83c 	b.w	8002354 <_calloc_r>
 80022dc:	2000002c 	.word	0x2000002c

080022e0 <__errno>:
 80022e0:	4b01      	ldr	r3, [pc, #4]	; (80022e8 <__errno+0x8>)
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	2000002c 	.word	0x2000002c

080022ec <__libc_init_array>:
 80022ec:	b570      	push	{r4, r5, r6, lr}
 80022ee:	2500      	movs	r5, #0
 80022f0:	4e0c      	ldr	r6, [pc, #48]	; (8002324 <__libc_init_array+0x38>)
 80022f2:	4c0d      	ldr	r4, [pc, #52]	; (8002328 <__libc_init_array+0x3c>)
 80022f4:	1ba4      	subs	r4, r4, r6
 80022f6:	10a4      	asrs	r4, r4, #2
 80022f8:	42a5      	cmp	r5, r4
 80022fa:	d109      	bne.n	8002310 <__libc_init_array+0x24>
 80022fc:	f000 f8f0 	bl	80024e0 <_init>
 8002300:	2500      	movs	r5, #0
 8002302:	4e0a      	ldr	r6, [pc, #40]	; (800232c <__libc_init_array+0x40>)
 8002304:	4c0a      	ldr	r4, [pc, #40]	; (8002330 <__libc_init_array+0x44>)
 8002306:	1ba4      	subs	r4, r4, r6
 8002308:	10a4      	asrs	r4, r4, #2
 800230a:	42a5      	cmp	r5, r4
 800230c:	d105      	bne.n	800231a <__libc_init_array+0x2e>
 800230e:	bd70      	pop	{r4, r5, r6, pc}
 8002310:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002314:	4798      	blx	r3
 8002316:	3501      	adds	r5, #1
 8002318:	e7ee      	b.n	80022f8 <__libc_init_array+0xc>
 800231a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800231e:	4798      	blx	r3
 8002320:	3501      	adds	r5, #1
 8002322:	e7f2      	b.n	800230a <__libc_init_array+0x1e>
 8002324:	08002510 	.word	0x08002510
 8002328:	08002510 	.word	0x08002510
 800232c:	08002510 	.word	0x08002510
 8002330:	08002514 	.word	0x08002514

08002334 <free>:
 8002334:	4b02      	ldr	r3, [pc, #8]	; (8002340 <free+0xc>)
 8002336:	4601      	mov	r1, r0
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	f000 b819 	b.w	8002370 <_free_r>
 800233e:	bf00      	nop
 8002340:	2000002c 	.word	0x2000002c

08002344 <memset>:
 8002344:	4603      	mov	r3, r0
 8002346:	4402      	add	r2, r0
 8002348:	4293      	cmp	r3, r2
 800234a:	d100      	bne.n	800234e <memset+0xa>
 800234c:	4770      	bx	lr
 800234e:	f803 1b01 	strb.w	r1, [r3], #1
 8002352:	e7f9      	b.n	8002348 <memset+0x4>

08002354 <_calloc_r>:
 8002354:	b538      	push	{r3, r4, r5, lr}
 8002356:	fb02 f401 	mul.w	r4, r2, r1
 800235a:	4621      	mov	r1, r4
 800235c:	f000 f854 	bl	8002408 <_malloc_r>
 8002360:	4605      	mov	r5, r0
 8002362:	b118      	cbz	r0, 800236c <_calloc_r+0x18>
 8002364:	4622      	mov	r2, r4
 8002366:	2100      	movs	r1, #0
 8002368:	f7ff ffec 	bl	8002344 <memset>
 800236c:	4628      	mov	r0, r5
 800236e:	bd38      	pop	{r3, r4, r5, pc}

08002370 <_free_r>:
 8002370:	b538      	push	{r3, r4, r5, lr}
 8002372:	4605      	mov	r5, r0
 8002374:	2900      	cmp	r1, #0
 8002376:	d043      	beq.n	8002400 <_free_r+0x90>
 8002378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800237c:	1f0c      	subs	r4, r1, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	bfb8      	it	lt
 8002382:	18e4      	addlt	r4, r4, r3
 8002384:	f000 f8aa 	bl	80024dc <__malloc_lock>
 8002388:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <_free_r+0x94>)
 800238a:	6813      	ldr	r3, [r2, #0]
 800238c:	4610      	mov	r0, r2
 800238e:	b933      	cbnz	r3, 800239e <_free_r+0x2e>
 8002390:	6063      	str	r3, [r4, #4]
 8002392:	6014      	str	r4, [r2, #0]
 8002394:	4628      	mov	r0, r5
 8002396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800239a:	f000 b8a0 	b.w	80024de <__malloc_unlock>
 800239e:	42a3      	cmp	r3, r4
 80023a0:	d90b      	bls.n	80023ba <_free_r+0x4a>
 80023a2:	6821      	ldr	r1, [r4, #0]
 80023a4:	1862      	adds	r2, r4, r1
 80023a6:	4293      	cmp	r3, r2
 80023a8:	bf01      	itttt	eq
 80023aa:	681a      	ldreq	r2, [r3, #0]
 80023ac:	685b      	ldreq	r3, [r3, #4]
 80023ae:	1852      	addeq	r2, r2, r1
 80023b0:	6022      	streq	r2, [r4, #0]
 80023b2:	6063      	str	r3, [r4, #4]
 80023b4:	6004      	str	r4, [r0, #0]
 80023b6:	e7ed      	b.n	8002394 <_free_r+0x24>
 80023b8:	4613      	mov	r3, r2
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	b10a      	cbz	r2, 80023c2 <_free_r+0x52>
 80023be:	42a2      	cmp	r2, r4
 80023c0:	d9fa      	bls.n	80023b8 <_free_r+0x48>
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	1858      	adds	r0, r3, r1
 80023c6:	42a0      	cmp	r0, r4
 80023c8:	d10b      	bne.n	80023e2 <_free_r+0x72>
 80023ca:	6820      	ldr	r0, [r4, #0]
 80023cc:	4401      	add	r1, r0
 80023ce:	1858      	adds	r0, r3, r1
 80023d0:	4282      	cmp	r2, r0
 80023d2:	6019      	str	r1, [r3, #0]
 80023d4:	d1de      	bne.n	8002394 <_free_r+0x24>
 80023d6:	6810      	ldr	r0, [r2, #0]
 80023d8:	6852      	ldr	r2, [r2, #4]
 80023da:	4401      	add	r1, r0
 80023dc:	6019      	str	r1, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	e7d8      	b.n	8002394 <_free_r+0x24>
 80023e2:	d902      	bls.n	80023ea <_free_r+0x7a>
 80023e4:	230c      	movs	r3, #12
 80023e6:	602b      	str	r3, [r5, #0]
 80023e8:	e7d4      	b.n	8002394 <_free_r+0x24>
 80023ea:	6820      	ldr	r0, [r4, #0]
 80023ec:	1821      	adds	r1, r4, r0
 80023ee:	428a      	cmp	r2, r1
 80023f0:	bf01      	itttt	eq
 80023f2:	6811      	ldreq	r1, [r2, #0]
 80023f4:	6852      	ldreq	r2, [r2, #4]
 80023f6:	1809      	addeq	r1, r1, r0
 80023f8:	6021      	streq	r1, [r4, #0]
 80023fa:	6062      	str	r2, [r4, #4]
 80023fc:	605c      	str	r4, [r3, #4]
 80023fe:	e7c9      	b.n	8002394 <_free_r+0x24>
 8002400:	bd38      	pop	{r3, r4, r5, pc}
 8002402:	bf00      	nop
 8002404:	20000d24 	.word	0x20000d24

08002408 <_malloc_r>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	1ccd      	adds	r5, r1, #3
 800240c:	f025 0503 	bic.w	r5, r5, #3
 8002410:	3508      	adds	r5, #8
 8002412:	2d0c      	cmp	r5, #12
 8002414:	bf38      	it	cc
 8002416:	250c      	movcc	r5, #12
 8002418:	2d00      	cmp	r5, #0
 800241a:	4606      	mov	r6, r0
 800241c:	db01      	blt.n	8002422 <_malloc_r+0x1a>
 800241e:	42a9      	cmp	r1, r5
 8002420:	d903      	bls.n	800242a <_malloc_r+0x22>
 8002422:	230c      	movs	r3, #12
 8002424:	6033      	str	r3, [r6, #0]
 8002426:	2000      	movs	r0, #0
 8002428:	bd70      	pop	{r4, r5, r6, pc}
 800242a:	f000 f857 	bl	80024dc <__malloc_lock>
 800242e:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <_malloc_r+0xac>)
 8002430:	6814      	ldr	r4, [r2, #0]
 8002432:	4621      	mov	r1, r4
 8002434:	b991      	cbnz	r1, 800245c <_malloc_r+0x54>
 8002436:	4c20      	ldr	r4, [pc, #128]	; (80024b8 <_malloc_r+0xb0>)
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	b91b      	cbnz	r3, 8002444 <_malloc_r+0x3c>
 800243c:	4630      	mov	r0, r6
 800243e:	f000 f83d 	bl	80024bc <_sbrk_r>
 8002442:	6020      	str	r0, [r4, #0]
 8002444:	4629      	mov	r1, r5
 8002446:	4630      	mov	r0, r6
 8002448:	f000 f838 	bl	80024bc <_sbrk_r>
 800244c:	1c43      	adds	r3, r0, #1
 800244e:	d124      	bne.n	800249a <_malloc_r+0x92>
 8002450:	230c      	movs	r3, #12
 8002452:	4630      	mov	r0, r6
 8002454:	6033      	str	r3, [r6, #0]
 8002456:	f000 f842 	bl	80024de <__malloc_unlock>
 800245a:	e7e4      	b.n	8002426 <_malloc_r+0x1e>
 800245c:	680b      	ldr	r3, [r1, #0]
 800245e:	1b5b      	subs	r3, r3, r5
 8002460:	d418      	bmi.n	8002494 <_malloc_r+0x8c>
 8002462:	2b0b      	cmp	r3, #11
 8002464:	d90f      	bls.n	8002486 <_malloc_r+0x7e>
 8002466:	600b      	str	r3, [r1, #0]
 8002468:	18cc      	adds	r4, r1, r3
 800246a:	50cd      	str	r5, [r1, r3]
 800246c:	4630      	mov	r0, r6
 800246e:	f000 f836 	bl	80024de <__malloc_unlock>
 8002472:	f104 000b 	add.w	r0, r4, #11
 8002476:	1d23      	adds	r3, r4, #4
 8002478:	f020 0007 	bic.w	r0, r0, #7
 800247c:	1ac3      	subs	r3, r0, r3
 800247e:	d0d3      	beq.n	8002428 <_malloc_r+0x20>
 8002480:	425a      	negs	r2, r3
 8002482:	50e2      	str	r2, [r4, r3]
 8002484:	e7d0      	b.n	8002428 <_malloc_r+0x20>
 8002486:	684b      	ldr	r3, [r1, #4]
 8002488:	428c      	cmp	r4, r1
 800248a:	bf16      	itet	ne
 800248c:	6063      	strne	r3, [r4, #4]
 800248e:	6013      	streq	r3, [r2, #0]
 8002490:	460c      	movne	r4, r1
 8002492:	e7eb      	b.n	800246c <_malloc_r+0x64>
 8002494:	460c      	mov	r4, r1
 8002496:	6849      	ldr	r1, [r1, #4]
 8002498:	e7cc      	b.n	8002434 <_malloc_r+0x2c>
 800249a:	1cc4      	adds	r4, r0, #3
 800249c:	f024 0403 	bic.w	r4, r4, #3
 80024a0:	42a0      	cmp	r0, r4
 80024a2:	d005      	beq.n	80024b0 <_malloc_r+0xa8>
 80024a4:	1a21      	subs	r1, r4, r0
 80024a6:	4630      	mov	r0, r6
 80024a8:	f000 f808 	bl	80024bc <_sbrk_r>
 80024ac:	3001      	adds	r0, #1
 80024ae:	d0cf      	beq.n	8002450 <_malloc_r+0x48>
 80024b0:	6025      	str	r5, [r4, #0]
 80024b2:	e7db      	b.n	800246c <_malloc_r+0x64>
 80024b4:	20000d24 	.word	0x20000d24
 80024b8:	20000d28 	.word	0x20000d28

080024bc <_sbrk_r>:
 80024bc:	b538      	push	{r3, r4, r5, lr}
 80024be:	2300      	movs	r3, #0
 80024c0:	4c05      	ldr	r4, [pc, #20]	; (80024d8 <_sbrk_r+0x1c>)
 80024c2:	4605      	mov	r5, r0
 80024c4:	4608      	mov	r0, r1
 80024c6:	6023      	str	r3, [r4, #0]
 80024c8:	f7fe fa4a 	bl	8000960 <_sbrk>
 80024cc:	1c43      	adds	r3, r0, #1
 80024ce:	d102      	bne.n	80024d6 <_sbrk_r+0x1a>
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	b103      	cbz	r3, 80024d6 <_sbrk_r+0x1a>
 80024d4:	602b      	str	r3, [r5, #0]
 80024d6:	bd38      	pop	{r3, r4, r5, pc}
 80024d8:	200013a8 	.word	0x200013a8

080024dc <__malloc_lock>:
 80024dc:	4770      	bx	lr

080024de <__malloc_unlock>:
 80024de:	4770      	bx	lr

080024e0 <_init>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	bf00      	nop
 80024e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e6:	bc08      	pop	{r3}
 80024e8:	469e      	mov	lr, r3
 80024ea:	4770      	bx	lr

080024ec <_fini>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	bf00      	nop
 80024f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f2:	bc08      	pop	{r3}
 80024f4:	469e      	mov	lr, r3
 80024f6:	4770      	bx	lr
